plugins {
    id 'org.jetbrains.kotlin.multiplatform'
}

version '0.0.1'

def jvmMainClass = 'MainJVMKt'
def taskGroupRunSample = 'run sample'

kotlin {
    jvm()
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    linuxX64("linux") {
        binaries {
            executable {

            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                api project(':kecs')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
            dependsOn commonMain
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
            dependsOn commonTest
        }
        linuxMain {
            dependsOn commonMain
        }
        linuxTest {
            dependsOn commonTest
        }
    }
    targets {
        jvm()
        configure([jvm])  {
            withJava()
            jvmJar {
                manifest {
                    attributes 'Main-Class': jvmMainClass
                }
                from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            }
        }
    }
}

tasks.register("runSampleJvm", JavaExec) {
    group = taskGroupRunSample
    main = jvmMainClass
    classpath = files(tasks.jvmJar)
}

tasks.register("runSampleLinuxDebug") {
    group = taskGroupRunSample
    dependsOn("runDebugExecutableLinux")
}

tasks.register("runSampleLinuxRelease") {
    group = taskGroupRunSample
    dependsOn("runReleaseExecutableLinux")
}
