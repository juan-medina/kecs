{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlin Entity component system \u00b6 TBC TBC","title":"Home"},{"location":"#kotlin-entity-component-system","text":"TBC TBC","title":"Kotlin Entity component system"},{"location":"example/","text":"Examples \u00b6 Check an Url and get the domain \u00b6 import kecs.KEcs import kecs.KEcs.dsl.ecs import kecs.system.System import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = ecs { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lure = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val lureName = lure . get < Lure >(). name val lureTime = lure . get < Position >(). time println ( \"$lureName arrived in ${lureTime.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . view ( Animal :: class , Position :: class ). sortedBy { it . get < Position >(). time }. forEachIndexed { place , it -> // get the components of the entity and display it val animal = it . get < Animal >() val pos = it . get < Position >() println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${pos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // get entities that has position and movement ecs . view ( Position :: class , Movement :: class ). forEach { // get the movement component val movement = it . get < Movement >() // if we are running if ( movement . status == MovementStatus . Running ) { // get the position component val position = it . get < Position >() // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // if we dont have a winner if (! ecs . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure ecs . view ( Position :: class , Animal :: class ). forEach { val position = it . get < Position >() val animal = it . get < Animal >() // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner ecs . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // first we will check if we aren't already ended if ( ecs . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = ecs . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended val status = ecs . entity ( RaceStatus :: class ) status . set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , ecs : KEcs ) { // get from all entities that has position the position val positions = ecs . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { println ( \"Running Linux Sample\" ) animalRace () }","title":"Example"},{"location":"example/#examples","text":"","title":"Examples"},{"location":"example/#check-an-url-and-get-the-domain","text":"import kecs.KEcs import kecs.KEcs.dsl.ecs import kecs.system.System import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = ecs { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lure = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val lureName = lure . get < Lure >(). name val lureTime = lure . get < Position >(). time println ( \"$lureName arrived in ${lureTime.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . view ( Animal :: class , Position :: class ). sortedBy { it . get < Position >(). time }. forEachIndexed { place , it -> // get the components of the entity and display it val animal = it . get < Animal >() val pos = it . get < Position >() println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${pos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // get entities that has position and movement ecs . view ( Position :: class , Movement :: class ). forEach { // get the movement component val movement = it . get < Movement >() // if we are running if ( movement . status == MovementStatus . Running ) { // get the position component val position = it . get < Position >() // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // if we dont have a winner if (! ecs . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure ecs . view ( Position :: class , Animal :: class ). forEach { val position = it . get < Position >() val animal = it . get < Animal >() // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner ecs . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , ecs : KEcs ) { // first we will check if we aren't already ended if ( ecs . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = ecs . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended val status = ecs . entity ( RaceStatus :: class ) status . set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , ecs : KEcs ) { // get from all entities that has position the position val positions = ecs . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { println ( \"Running Linux Sample\" ) animalRace () }","title":"Check an Url and get the domain"},{"location":"packages/kecs/","text":"kecs Packages \u00b6 Name Summary kecs kecs.dsl kecs.entity kecs.platform kecs.system Index \u00b6 All Types","title":"API Documentation"},{"location":"packages/kecs/#packages","text":"Name Summary kecs kecs.dsl kecs.entity kecs.platform kecs.system","title":"Packages"},{"location":"packages/kecs/#index","text":"All Types","title":"Index"},{"location":"packages/kecs/alltypes/","text":"All Types \u00b6 Name Summary kecs.dsl.Dsl \u00b6 | kecs.entity.Entity \u00b6 | kecs.dsl.EntityDsl \u00b6 | kecs.KEcs \u00b6 | kecs.dsl.KEcsDsl \u00b6 | kecs.platform.Platform \u00b6 | kecs.system.System \u00b6 | kecs.entity.View \u00b6","title":"Index"},{"location":"packages/kecs/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"packages/kecs/alltypes/#kecsdsldsl","text":"|","title":"kecs.dsl.Dsl"},{"location":"packages/kecs/alltypes/#kecsentityentity","text":"|","title":"kecs.entity.Entity"},{"location":"packages/kecs/alltypes/#kecsdslentitydsl","text":"|","title":"kecs.dsl.EntityDsl"},{"location":"packages/kecs/alltypes/#kecskecs","text":"|","title":"kecs.KEcs"},{"location":"packages/kecs/alltypes/#kecsdslkecsdsl","text":"|","title":"kecs.dsl.KEcsDsl"},{"location":"packages/kecs/alltypes/#kecsplatformplatform","text":"|","title":"kecs.platform.Platform"},{"location":"packages/kecs/alltypes/#kecssystemsystem","text":"|","title":"kecs.system.System"},{"location":"packages/kecs/alltypes/#kecsentityview","text":"","title":"kecs.entity.View"},{"location":"packages/kecs/kecs/","text":"kecs / kecs Package kecs \u00b6 Types \u00b6 Name Summary KEcs class KEcs : View","title":"Index"},{"location":"packages/kecs/kecs/#package-kecs","text":"","title":"Package kecs"},{"location":"packages/kecs/kecs/#types","text":"Name Summary KEcs class KEcs : View","title":"Types"},{"location":"packages/kecs/kecs/-k-ecs/","text":"kecs / kecs / KEcs KEcs \u00b6 class KEcs : View Constructors \u00b6 Name Summary <init> KEcs() Functions \u00b6 Name Summary add fun add(system: System ): Unit update fun update(): Unit Companion Object Functions \u00b6 Name Summary ecs fun ecs(init: KEcsDsl .() -> Unit ): KEcs","title":"Index"},{"location":"packages/kecs/kecs/-k-ecs/#kecs","text":"class KEcs : View","title":"KEcs"},{"location":"packages/kecs/kecs/-k-ecs/#constructors","text":"Name Summary <init> KEcs()","title":"Constructors"},{"location":"packages/kecs/kecs/-k-ecs/#functions","text":"Name Summary add fun add(system: System ): Unit update fun update(): Unit","title":"Functions"},{"location":"packages/kecs/kecs/-k-ecs/#companion-object-functions","text":"Name Summary ecs fun ecs(init: KEcsDsl .() -> Unit ): KEcs","title":"Companion Object Functions"},{"location":"packages/kecs/kecs/-k-ecs/-init-/","text":"kecs / kecs / KEcs / <init> <init> \u00b6 KEcs()","title":" init "},{"location":"packages/kecs/kecs/-k-ecs/-init-/#init","text":"KEcs()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs/-k-ecs/add/","text":"kecs / kecs / KEcs / add add \u00b6 fun add(system: System ): Unit","title":"Add"},{"location":"packages/kecs/kecs/-k-ecs/add/#add","text":"fun add(system: System ): Unit","title":"add"},{"location":"packages/kecs/kecs/-k-ecs/ecs/","text":"kecs / kecs / KEcs / ecs ecs \u00b6 fun ecs(init: KEcsDsl .() -> Unit ): KEcs","title":"Ecs"},{"location":"packages/kecs/kecs/-k-ecs/ecs/#ecs","text":"fun ecs(init: KEcsDsl .() -> Unit ): KEcs","title":"ecs"},{"location":"packages/kecs/kecs/-k-ecs/update/","text":"kecs / kecs / KEcs / update update \u00b6 fun update(): Unit","title":"Update"},{"location":"packages/kecs/kecs/-k-ecs/update/#update","text":"fun update(): Unit","title":"update"},{"location":"packages/kecs/kecs.dsl/","text":"kecs / kecs.dsl Package kecs.dsl \u00b6 Types \u00b6 Name Summary EntityDsl class EntityDsl KEcsDsl class KEcsDsl Annotations \u00b6 Name Summary Dsl annotation class Dsl","title":"Index"},{"location":"packages/kecs/kecs.dsl/#package-kecsdsl","text":"","title":"Package kecs.dsl"},{"location":"packages/kecs/kecs.dsl/#types","text":"Name Summary EntityDsl class EntityDsl KEcsDsl class KEcsDsl","title":"Types"},{"location":"packages/kecs/kecs.dsl/#annotations","text":"Name Summary Dsl annotation class Dsl","title":"Annotations"},{"location":"packages/kecs/kecs.dsl/-dsl/","text":"kecs / kecs.dsl / Dsl Dsl \u00b6 @DslMarker annotation class Dsl Constructors \u00b6 Name Summary <init> Dsl()","title":"Index"},{"location":"packages/kecs/kecs.dsl/-dsl/#dsl","text":"@DslMarker annotation class Dsl","title":"Dsl"},{"location":"packages/kecs/kecs.dsl/-dsl/#constructors","text":"Name Summary <init> Dsl()","title":"Constructors"},{"location":"packages/kecs/kecs.dsl/-dsl/-init-/","text":"kecs / kecs.dsl / Dsl / <init> <init> \u00b6 Dsl()","title":" init "},{"location":"packages/kecs/kecs.dsl/-dsl/-init-/#init","text":"Dsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/","text":"kecs / kecs.dsl / EntityDsl EntityDsl \u00b6 class EntityDsl Constructors \u00b6 Name Summary <init> EntityDsl() Properties \u00b6 Name Summary entity val entity: Entity Functions \u00b6 Name Summary entity fun entity(): Entity unaryPlus operator fun <T : Any > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/#entitydsl","text":"class EntityDsl","title":"EntityDsl"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/#constructors","text":"Name Summary <init> EntityDsl()","title":"Constructors"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/#properties","text":"Name Summary entity val entity: Entity","title":"Properties"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/#functions","text":"Name Summary entity fun entity(): Entity unaryPlus operator fun <T : Any > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/-init-/","text":"kecs / kecs.dsl / EntityDsl / <init> <init> \u00b6 EntityDsl()","title":" init "},{"location":"packages/kecs/kecs.dsl/-entity-dsl/-init-/#init","text":"EntityDsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/entity/","text":"kecs / kecs.dsl / EntityDsl / entity entity \u00b6 val entity: Entity fun entity(): Entity","title":"Entity"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/entity/#entity","text":"val entity: Entity fun entity(): Entity","title":"entity"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/unary-plus/","text":"kecs / kecs.dsl / EntityDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : Any > T.unaryPlus(): Unit","title":"Unary plus"},{"location":"packages/kecs/kecs.dsl/-entity-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : Any > T.unaryPlus(): Unit","title":"unaryPlus"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/","text":"kecs / kecs.dsl / KEcsDsl KEcsDsl \u00b6 class KEcsDsl Constructors \u00b6 Name Summary <init> KEcsDsl() Properties \u00b6 Name Summary ecs val ecs: KEcs Functions \u00b6 Name Summary ecs fun ecs(): KEcs unaryPlus operator fun <T : System > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/#kecsdsl","text":"class KEcsDsl","title":"KEcsDsl"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/#constructors","text":"Name Summary <init> KEcsDsl()","title":"Constructors"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/#properties","text":"Name Summary ecs val ecs: KEcs","title":"Properties"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/#functions","text":"Name Summary ecs fun ecs(): KEcs unaryPlus operator fun <T : System > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/-init-/","text":"kecs / kecs.dsl / KEcsDsl / <init> <init> \u00b6 KEcsDsl()","title":" init "},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/-init-/#init","text":"KEcsDsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/ecs/","text":"kecs / kecs.dsl / KEcsDsl / ecs ecs \u00b6 val ecs: KEcs fun ecs(): KEcs","title":"Ecs"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/ecs/#ecs","text":"val ecs: KEcs fun ecs(): KEcs","title":"ecs"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/unary-plus/","text":"kecs / kecs.dsl / KEcsDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : System > T.unaryPlus(): Unit","title":"Unary plus"},{"location":"packages/kecs/kecs.dsl/-k-ecs-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : System > T.unaryPlus(): Unit","title":"unaryPlus"},{"location":"packages/kecs/kecs.entity/","text":"kecs / kecs.entity Package kecs.entity \u00b6 Types \u00b6 Name Summary Entity class Entity View open class View : MutableCollection < Entity >","title":"Index"},{"location":"packages/kecs/kecs.entity/#package-kecsentity","text":"","title":"Package kecs.entity"},{"location":"packages/kecs/kecs.entity/#types","text":"Name Summary Entity class Entity View open class View : MutableCollection < Entity >","title":"Types"},{"location":"packages/kecs/kecs.entity/-entity/","text":"kecs / kecs.entity / Entity Entity \u00b6 class Entity Constructors \u00b6 Name Summary <init> Entity() Properties \u00b6 Name Summary components val components: HashMap < KClass <*>, Any > Functions \u00b6 Name Summary add infix fun <T : Any > add(component: T): Unit get fun <T : Any > get(): T hasComponent fun <T : Any > hasComponent(): Boolean fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty fun isEmpty(): Boolean removeComponent fun <T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit set fun <T : Any > set(component: T): Unit Companion Object Functions \u00b6 Name Summary entity fun entity(init: EntityDsl .() -> Unit ): Entity","title":"Index"},{"location":"packages/kecs/kecs.entity/-entity/#entity","text":"class Entity","title":"Entity"},{"location":"packages/kecs/kecs.entity/-entity/#constructors","text":"Name Summary <init> Entity()","title":"Constructors"},{"location":"packages/kecs/kecs.entity/-entity/#properties","text":"Name Summary components val components: HashMap < KClass <*>, Any >","title":"Properties"},{"location":"packages/kecs/kecs.entity/-entity/#functions","text":"Name Summary add infix fun <T : Any > add(component: T): Unit get fun <T : Any > get(): T hasComponent fun <T : Any > hasComponent(): Boolean fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty fun isEmpty(): Boolean removeComponent fun <T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit set fun <T : Any > set(component: T): Unit","title":"Functions"},{"location":"packages/kecs/kecs.entity/-entity/#companion-object-functions","text":"Name Summary entity fun entity(init: EntityDsl .() -> Unit ): Entity","title":"Companion Object Functions"},{"location":"packages/kecs/kecs.entity/-entity/-init-/","text":"kecs / kecs.entity / Entity / <init> <init> \u00b6 Entity()","title":" init "},{"location":"packages/kecs/kecs.entity/-entity/-init-/#init","text":"Entity()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.entity/-entity/add/","text":"kecs / kecs.entity / Entity / add add \u00b6 infix fun <reified T : Any > add(component: T): Unit","title":"Add"},{"location":"packages/kecs/kecs.entity/-entity/add/#add","text":"infix fun <reified T : Any > add(component: T): Unit","title":"add"},{"location":"packages/kecs/kecs.entity/-entity/components/","text":"kecs / kecs.entity / Entity / components components \u00b6 val components: HashMap < KClass <*>, Any >","title":"Components"},{"location":"packages/kecs/kecs.entity/-entity/components/#components","text":"val components: HashMap < KClass <*>, Any >","title":"components"},{"location":"packages/kecs/kecs.entity/-entity/entity/","text":"kecs / kecs.entity / Entity / entity entity \u00b6 fun entity(init: EntityDsl .() -> Unit ): Entity","title":"Entity"},{"location":"packages/kecs/kecs.entity/-entity/entity/#entity","text":"fun entity(init: EntityDsl .() -> Unit ): Entity","title":"entity"},{"location":"packages/kecs/kecs.entity/-entity/get/","text":"kecs / kecs.entity / Entity / get get \u00b6 fun <reified T : Any > get(): T","title":"Get"},{"location":"packages/kecs/kecs.entity/-entity/get/#get","text":"fun <reified T : Any > get(): T","title":"get"},{"location":"packages/kecs/kecs.entity/-entity/has-component/","text":"kecs / kecs.entity / Entity / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean","title":"Has component"},{"location":"packages/kecs/kecs.entity/-entity/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean","title":"hasComponent"},{"location":"packages/kecs/kecs.entity/-entity/has-components/","text":"kecs / kecs.entity / Entity / hasComponents hasComponents \u00b6 fun hasComponents(vararg types: KClass <out Any >): Boolean","title":"Has components"},{"location":"packages/kecs/kecs.entity/-entity/has-components/#hascomponents","text":"fun hasComponents(vararg types: KClass <out Any >): Boolean","title":"hasComponents"},{"location":"packages/kecs/kecs.entity/-entity/is-empty/","text":"kecs / kecs.entity / Entity / isEmpty isEmpty \u00b6 fun isEmpty(): Boolean","title":"Is empty"},{"location":"packages/kecs/kecs.entity/-entity/is-empty/#isempty","text":"fun isEmpty(): Boolean","title":"isEmpty"},{"location":"packages/kecs/kecs.entity/-entity/remove-component/","text":"kecs / kecs.entity / Entity / removeComponent removeComponent \u00b6 fun <reified T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit","title":"Remove component"},{"location":"packages/kecs/kecs.entity/-entity/remove-component/#removecomponent","text":"fun <reified T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit","title":"removeComponent"},{"location":"packages/kecs/kecs.entity/-entity/set/","text":"kecs / kecs.entity / Entity / set set \u00b6 fun <reified T : Any > set(component: T): Unit","title":"Set"},{"location":"packages/kecs/kecs.entity/-entity/set/#set","text":"fun <reified T : Any > set(component: T): Unit","title":"set"},{"location":"packages/kecs/kecs.entity/-view/","text":"kecs / kecs.entity / View View \u00b6 open class View : MutableCollection < Entity > Constructors \u00b6 Name Summary <init> View(entities: Iterable < Entity >) View() Properties \u00b6 Name Summary size open val size: Int Functions \u00b6 Name Summary add fun add(init: EntityDsl .() -> Unit ): Entity open fun add(element: Entity ): Boolean addAll open fun addAll(elements: Collection < Entity >): Boolean clear open fun clear(): Unit component fun <T : Any > component(): T components fun <T : Any > components(): List <T> contains open fun contains(element: Entity ): Boolean containsAll open fun containsAll(elements: Collection < Entity >): Boolean entity fun entity(vararg types: KClass <out Any >): Entity hasComponent fun <T : Any > hasComponent(): Boolean isEmpty open fun isEmpty(): Boolean iterator open fun iterator(): MutableIterator < Entity > remove open fun remove(element: Entity ): Boolean removeAll open fun removeAll(elements: Collection < Entity >): Boolean retainAll open fun retainAll(elements: Collection < Entity >): Boolean view fun view(vararg types: KClass <out Any >): View Inheritors \u00b6 Name Summary KEcs class KEcs : View","title":"Index"},{"location":"packages/kecs/kecs.entity/-view/#view","text":"open class View : MutableCollection < Entity >","title":"View"},{"location":"packages/kecs/kecs.entity/-view/#constructors","text":"Name Summary <init> View(entities: Iterable < Entity >) View()","title":"Constructors"},{"location":"packages/kecs/kecs.entity/-view/#properties","text":"Name Summary size open val size: Int","title":"Properties"},{"location":"packages/kecs/kecs.entity/-view/#functions","text":"Name Summary add fun add(init: EntityDsl .() -> Unit ): Entity open fun add(element: Entity ): Boolean addAll open fun addAll(elements: Collection < Entity >): Boolean clear open fun clear(): Unit component fun <T : Any > component(): T components fun <T : Any > components(): List <T> contains open fun contains(element: Entity ): Boolean containsAll open fun containsAll(elements: Collection < Entity >): Boolean entity fun entity(vararg types: KClass <out Any >): Entity hasComponent fun <T : Any > hasComponent(): Boolean isEmpty open fun isEmpty(): Boolean iterator open fun iterator(): MutableIterator < Entity > remove open fun remove(element: Entity ): Boolean removeAll open fun removeAll(elements: Collection < Entity >): Boolean retainAll open fun retainAll(elements: Collection < Entity >): Boolean view fun view(vararg types: KClass <out Any >): View","title":"Functions"},{"location":"packages/kecs/kecs.entity/-view/#inheritors","text":"Name Summary KEcs class KEcs : View","title":"Inheritors"},{"location":"packages/kecs/kecs.entity/-view/-init-/","text":"kecs / kecs.entity / View / <init> <init> \u00b6 View(entities: Iterable < Entity >) View()","title":" init "},{"location":"packages/kecs/kecs.entity/-view/-init-/#init","text":"View(entities: Iterable < Entity >) View()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.entity/-view/add-all/","text":"kecs / kecs.entity / View / addAll addAll \u00b6 open fun addAll(elements: Collection < Entity >): Boolean","title":"Add all"},{"location":"packages/kecs/kecs.entity/-view/add-all/#addall","text":"open fun addAll(elements: Collection < Entity >): Boolean","title":"addAll"},{"location":"packages/kecs/kecs.entity/-view/add/","text":"kecs / kecs.entity / View / add add \u00b6 fun add(init: EntityDsl .() -> Unit ): Entity open fun add(element: Entity ): Boolean","title":"Add"},{"location":"packages/kecs/kecs.entity/-view/add/#add","text":"fun add(init: EntityDsl .() -> Unit ): Entity open fun add(element: Entity ): Boolean","title":"add"},{"location":"packages/kecs/kecs.entity/-view/clear/","text":"kecs / kecs.entity / View / clear clear \u00b6 open fun clear(): Unit","title":"Clear"},{"location":"packages/kecs/kecs.entity/-view/clear/#clear","text":"open fun clear(): Unit","title":"clear"},{"location":"packages/kecs/kecs.entity/-view/component/","text":"kecs / kecs.entity / View / component component \u00b6 fun <reified T : Any > component(): T","title":"Component"},{"location":"packages/kecs/kecs.entity/-view/component/#component","text":"fun <reified T : Any > component(): T","title":"component"},{"location":"packages/kecs/kecs.entity/-view/components/","text":"kecs / kecs.entity / View / components components \u00b6 fun <reified T : Any > components(): List <T>","title":"Components"},{"location":"packages/kecs/kecs.entity/-view/components/#components","text":"fun <reified T : Any > components(): List <T>","title":"components"},{"location":"packages/kecs/kecs.entity/-view/contains-all/","text":"kecs / kecs.entity / View / containsAll containsAll \u00b6 open fun containsAll(elements: Collection < Entity >): Boolean","title":"Contains all"},{"location":"packages/kecs/kecs.entity/-view/contains-all/#containsall","text":"open fun containsAll(elements: Collection < Entity >): Boolean","title":"containsAll"},{"location":"packages/kecs/kecs.entity/-view/contains/","text":"kecs / kecs.entity / View / contains contains \u00b6 open fun contains(element: Entity ): Boolean","title":"Contains"},{"location":"packages/kecs/kecs.entity/-view/contains/#contains","text":"open fun contains(element: Entity ): Boolean","title":"contains"},{"location":"packages/kecs/kecs.entity/-view/entity/","text":"kecs / kecs.entity / View / entity entity \u00b6 fun entity(vararg types: KClass <out Any >): Entity","title":"Entity"},{"location":"packages/kecs/kecs.entity/-view/entity/#entity","text":"fun entity(vararg types: KClass <out Any >): Entity","title":"entity"},{"location":"packages/kecs/kecs.entity/-view/has-component/","text":"kecs / kecs.entity / View / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean","title":"Has component"},{"location":"packages/kecs/kecs.entity/-view/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean","title":"hasComponent"},{"location":"packages/kecs/kecs.entity/-view/is-empty/","text":"kecs / kecs.entity / View / isEmpty isEmpty \u00b6 open fun isEmpty(): Boolean","title":"Is empty"},{"location":"packages/kecs/kecs.entity/-view/is-empty/#isempty","text":"open fun isEmpty(): Boolean","title":"isEmpty"},{"location":"packages/kecs/kecs.entity/-view/iterator/","text":"kecs / kecs.entity / View / iterator iterator \u00b6 open fun iterator(): MutableIterator < Entity >","title":"Iterator"},{"location":"packages/kecs/kecs.entity/-view/iterator/#iterator","text":"open fun iterator(): MutableIterator < Entity >","title":"iterator"},{"location":"packages/kecs/kecs.entity/-view/remove-all/","text":"kecs / kecs.entity / View / removeAll removeAll \u00b6 open fun removeAll(elements: Collection < Entity >): Boolean","title":"Remove all"},{"location":"packages/kecs/kecs.entity/-view/remove-all/#removeall","text":"open fun removeAll(elements: Collection < Entity >): Boolean","title":"removeAll"},{"location":"packages/kecs/kecs.entity/-view/remove/","text":"kecs / kecs.entity / View / remove remove \u00b6 open fun remove(element: Entity ): Boolean","title":"Remove"},{"location":"packages/kecs/kecs.entity/-view/remove/#remove","text":"open fun remove(element: Entity ): Boolean","title":"remove"},{"location":"packages/kecs/kecs.entity/-view/retain-all/","text":"kecs / kecs.entity / View / retainAll retainAll \u00b6 open fun retainAll(elements: Collection < Entity >): Boolean","title":"Retain all"},{"location":"packages/kecs/kecs.entity/-view/retain-all/#retainall","text":"open fun retainAll(elements: Collection < Entity >): Boolean","title":"retainAll"},{"location":"packages/kecs/kecs.entity/-view/size/","text":"kecs / kecs.entity / View / size size \u00b6 open val size: Int","title":"Size"},{"location":"packages/kecs/kecs.entity/-view/size/#size","text":"open val size: Int","title":"size"},{"location":"packages/kecs/kecs.entity/-view/view/","text":"kecs / kecs.entity / View / view view \u00b6 fun view(vararg types: KClass <out Any >): View","title":"View"},{"location":"packages/kecs/kecs.entity/-view/view/#view","text":"fun view(vararg types: KClass <out Any >): View","title":"view"},{"location":"packages/kecs/kecs.platform/","text":"kecs / kecs.platform Package kecs.platform \u00b6 Types \u00b6 Name Summary Platform class Platform","title":"Index"},{"location":"packages/kecs/kecs.platform/#package-kecsplatform","text":"","title":"Package kecs.platform"},{"location":"packages/kecs/kecs.platform/#types","text":"Name Summary Platform class Platform","title":"Types"},{"location":"packages/kecs/kecs.platform/-platform/","text":"kecs / kecs.platform / Platform Platform \u00b6 class Platform Constructors \u00b6 Name Summary <init> Platform() Companion Object Functions \u00b6 Name Summary getSystemMillis fun getSystemMillis(): Long","title":"Index"},{"location":"packages/kecs/kecs.platform/-platform/#platform","text":"class Platform","title":"Platform"},{"location":"packages/kecs/kecs.platform/-platform/#constructors","text":"Name Summary <init> Platform()","title":"Constructors"},{"location":"packages/kecs/kecs.platform/-platform/#companion-object-functions","text":"Name Summary getSystemMillis fun getSystemMillis(): Long","title":"Companion Object Functions"},{"location":"packages/kecs/kecs.platform/-platform/-init-/","text":"kecs / kecs.platform / Platform / <init> <init> \u00b6 Platform()","title":" init "},{"location":"packages/kecs/kecs.platform/-platform/-init-/#init","text":"Platform()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.platform/-platform/get-system-millis/","text":"kecs / kecs.platform / Platform / getSystemMillis getSystemMillis \u00b6 fun getSystemMillis(): Long","title":"Get system millis"},{"location":"packages/kecs/kecs.platform/-platform/get-system-millis/#getsystemmillis","text":"fun getSystemMillis(): Long","title":"getSystemMillis"},{"location":"packages/kecs/kecs.system/","text":"kecs / kecs.system Package kecs.system \u00b6 Types \u00b6 Name Summary System abstract class System","title":"Index"},{"location":"packages/kecs/kecs.system/#package-kecssystem","text":"","title":"Package kecs.system"},{"location":"packages/kecs/kecs.system/#types","text":"Name Summary System abstract class System","title":"Types"},{"location":"packages/kecs/kecs.system/-system/","text":"kecs / kecs.system / System System \u00b6 abstract class System Constructors \u00b6 Name Summary <init> System() Functions \u00b6 Name Summary update abstract fun update(delta: Float , total: Float , ecs: KEcs ): Unit","title":"Index"},{"location":"packages/kecs/kecs.system/-system/#system","text":"abstract class System","title":"System"},{"location":"packages/kecs/kecs.system/-system/#constructors","text":"Name Summary <init> System()","title":"Constructors"},{"location":"packages/kecs/kecs.system/-system/#functions","text":"Name Summary update abstract fun update(delta: Float , total: Float , ecs: KEcs ): Unit","title":"Functions"},{"location":"packages/kecs/kecs.system/-system/-init-/","text":"kecs / kecs.system / System / <init> <init> \u00b6 System()","title":" init "},{"location":"packages/kecs/kecs.system/-system/-init-/#init","text":"System()","title":"&lt;init&gt;"},{"location":"packages/kecs/kecs.system/-system/update/","text":"kecs / kecs.system / System / update update \u00b6 abstract fun update(delta: Float , total: Float , ecs: KEcs ): Unit","title":"Update"},{"location":"packages/kecs/kecs.system/-system/update/#update","text":"abstract fun update(delta: Float , total: Float , ecs: KEcs ): Unit","title":"update"}]}