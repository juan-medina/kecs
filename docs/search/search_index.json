{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlin Entity Component System \u00b6 Kotlin Cross-platform Entity Component System Platforms \u00b6 Info \u00b6 KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. If you like to learn more about what is an ECS we try to give some clarification on this section . Installation \u00b6 Currently, KECS is not available in any distribution system, you need to clone and install it locally. > git clone git@github.com:juan-medina/kecs.git > cd keces > gradlew publishToMavenLocal This will install the multi-platform module for all the platforms in your system. Multi-platform gradle project \u00b6 If you are building a multi-platform gradle project you could add the overall module that will include all the dependencies for your specific platforms. kotlin { sourceSets { commonMain { dependencies { implementation kotlin ( 'stdlib-common' ) api ( 'com.juanmedina:kecs:0.0.1' ) } } } } For this to work you need to enable the gradle metadata module adding to the settings.gradle enableFeaturePreview ( 'GRADLE_METADATA' ) Single-platform gradle project \u00b6 For just adding as dependency for a simple platform you could do this in gradle: dependencies { api ( 'com.juanmedina:kecs-jvm:0.0.1' ) } Maven project \u00b6 If you use maven you need to include the dependencies of the platforms that you target: <dependency> <groupId> com.juanmedina </groupId> <artifactId> kecs-jvm </artifactId> <version> 0.0.1 </version> </dependency> Basic Usage \u00b6 This is a basic example, check the user guide , the advance example , or the API Documentation for learning more about using KECS. data class Velocity ( val x : Float , val y : Float ) data class Position ( var x : Float , var y : Float ) { operator fun plusAssign ( velocity : Velocity ) { x += velocity . x y += velocity . y } } class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Velocity :: class , Position :: class ). forEach { val vel = it . get < Velocity >() val pos = it . get < Position >(). copy () pos += vel it . set ( pos ) } } } fun example () { val world = world { + MoveSystem () } val ent1 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.0f , 2.0f ) } val ent2 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.5f , 2.5f ) } val ent3 = world . add { + Position ( 0.0f , 0.0f ) } while (...) { world . update () } } License \u00b6 Copyright (C) 2020 Juan Medina Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#kotlin-entity-component-system","text":"Kotlin Cross-platform Entity Component System","title":"Kotlin Entity Component System"},{"location":"#platforms","text":"","title":"Platforms"},{"location":"#info","text":"KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. If you like to learn more about what is an ECS we try to give some clarification on this section .","title":"Info"},{"location":"#installation","text":"Currently, KECS is not available in any distribution system, you need to clone and install it locally. > git clone git@github.com:juan-medina/kecs.git > cd keces > gradlew publishToMavenLocal This will install the multi-platform module for all the platforms in your system.","title":"Installation"},{"location":"#multi-platform-gradle-project","text":"If you are building a multi-platform gradle project you could add the overall module that will include all the dependencies for your specific platforms. kotlin { sourceSets { commonMain { dependencies { implementation kotlin ( 'stdlib-common' ) api ( 'com.juanmedina:kecs:0.0.1' ) } } } } For this to work you need to enable the gradle metadata module adding to the settings.gradle enableFeaturePreview ( 'GRADLE_METADATA' )","title":"Multi-platform gradle project"},{"location":"#single-platform-gradle-project","text":"For just adding as dependency for a simple platform you could do this in gradle: dependencies { api ( 'com.juanmedina:kecs-jvm:0.0.1' ) }","title":"Single-platform gradle project"},{"location":"#maven-project","text":"If you use maven you need to include the dependencies of the platforms that you target: <dependency> <groupId> com.juanmedina </groupId> <artifactId> kecs-jvm </artifactId> <version> 0.0.1 </version> </dependency>","title":"Maven project"},{"location":"#basic-usage","text":"This is a basic example, check the user guide , the advance example , or the API Documentation for learning more about using KECS. data class Velocity ( val x : Float , val y : Float ) data class Position ( var x : Float , var y : Float ) { operator fun plusAssign ( velocity : Velocity ) { x += velocity . x y += velocity . y } } class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Velocity :: class , Position :: class ). forEach { val vel = it . get < Velocity >() val pos = it . get < Position >(). copy () pos += vel it . set ( pos ) } } } fun example () { val world = world { + MoveSystem () } val ent1 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.0f , 2.0f ) } val ent2 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.5f , 2.5f ) } val ent3 = world . add { + Position ( 0.0f , 0.0f ) } while (...) { world . update () } }","title":"Basic Usage"},{"location":"#license","text":"Copyright (C) 2020 Juan Medina Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"ecs/","text":"Entities, components and systems \u00b6 Entity\u2013component\u2013system (ECS) is an architectural patter that follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a world. Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques. For a more in deep read on this topic I could recommend this article . Data-oriented Design \u00b6 A data oriented design is a design in which the logic of the application is built up of data sets, instead of procedural algorithms, they are highly optimized, specially because how computer organize data. For a more in deep read on this topic I could recommend this article . Understanding Data-oriented design for ECS \u00b6 On GDC 2019 Unity make a fascinating video about data-oriented design and ECS, and how this has a huge impact on performance, I strongly recommend watching this video.","title":"What is a ECS"},{"location":"ecs/#entities-components-and-systems","text":"Entity\u2013component\u2013system (ECS) is an architectural patter that follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a world. Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques. For a more in deep read on this topic I could recommend this article .","title":"Entities, components and systems"},{"location":"ecs/#data-oriented-design","text":"A data oriented design is a design in which the logic of the application is built up of data sets, instead of procedural algorithms, they are highly optimized, specially because how computer organize data. For a more in deep read on this topic I could recommend this article .","title":"Data-oriented Design"},{"location":"ecs/#understanding-data-oriented-design-for-ecs","text":"On GDC 2019 Unity make a fascinating video about data-oriented design and ECS, and how this has a huge impact on performance, I strongly recommend watching this video.","title":"Understanding Data-oriented design for ECS"},{"location":"example/","text":"Introduction \u00b6 Bellow we could see a advance example that tries to illustrate how to use an ECS to perform a concurrent task, in this example an animal race. This separate our entities components and systems , they concern and how they work with each other. Running the example \u00b6 If you like to run this example, from the root path of this project you could run the gradle task for your platform: > graddlew runSampleJvm > graddlew runSampleLinuxDebug > graddlew runSampleLinuxRelease Source Code \u00b6 You could browse this code on github . /* * Copyright (C) 2020 Juan Medina * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import com.juanmedina.kecs.World import com.juanmedina.kecs.dsl.add import com.juanmedina.kecs.dsl.world import com.juanmedina.kecs.system.System import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = world { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lure = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val lureName = lure . get < Lure >(). name val lureTime = lure . get < Position >(). time println ( \"$lureName arrived in ${lureTime.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . view ( Animal :: class , Position :: class ). sortedBy { it . get < Position >(). time }. forEachIndexed { place , it -> // get the components of the entity and display it val animal = it . get < Animal >() val pos = it . get < Position >() println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${pos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // get entities that has position and movement world . view ( Position :: class , Movement :: class ). forEach { // get the movement component val movement = it . get < Movement >() // if we are running if ( movement . status == MovementStatus . Running ) { // get the position component val position = it . get < Position >() // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // if we dont have a winner if (! world . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure world . view ( Position :: class , Animal :: class ). forEach { val position = it . get < Position >() val animal = it . get < Animal >() // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner world . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // first we will check if we aren't already ended if ( world . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = world . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended val status = world . entity ( RaceStatus :: class ) status . set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , world : World ) { // get from all entities that has position the position val positions = world . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { animalRace () }","title":"Advance Example"},{"location":"example/#introduction","text":"Bellow we could see a advance example that tries to illustrate how to use an ECS to perform a concurrent task, in this example an animal race. This separate our entities components and systems , they concern and how they work with each other.","title":"Introduction"},{"location":"example/#running-the-example","text":"If you like to run this example, from the root path of this project you could run the gradle task for your platform: > graddlew runSampleJvm > graddlew runSampleLinuxDebug > graddlew runSampleLinuxRelease","title":"Running the example"},{"location":"example/#source-code","text":"You could browse this code on github . /* * Copyright (C) 2020 Juan Medina * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import com.juanmedina.kecs.World import com.juanmedina.kecs.dsl.add import com.juanmedina.kecs.dsl.world import com.juanmedina.kecs.system.System import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = world { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lure = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val lureName = lure . get < Lure >(). name val lureTime = lure . get < Position >(). time println ( \"$lureName arrived in ${lureTime.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . view ( Animal :: class , Position :: class ). sortedBy { it . get < Position >(). time }. forEachIndexed { place , it -> // get the components of the entity and display it val animal = it . get < Animal >() val pos = it . get < Position >() println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${pos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // get entities that has position and movement world . view ( Position :: class , Movement :: class ). forEach { // get the movement component val movement = it . get < Movement >() // if we are running if ( movement . status == MovementStatus . Running ) { // get the position component val position = it . get < Position >() // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // if we dont have a winner if (! world . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure world . view ( Position :: class , Animal :: class ). forEach { val position = it . get < Position >() val animal = it . get < Animal >() // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner world . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // first we will check if we aren't already ended if ( world . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = world . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended val status = world . entity ( RaceStatus :: class ) status . set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , world : World ) { // get from all entities that has position the position val positions = world . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { animalRace () }","title":"Source Code"},{"location":"guide/","text":"Basics \u00b6 To learn how to use KECS let\u2019s start with the basics. Creating our world \u00b6 The first thing that we need for using KECS is to create our world, a object that will hold all of our entities, with their components, and systems. For this we could just do : val world = World () Adding entities \u00b6 Now we need to add entities to our world. val myEntity = Entity () Adding components \u00b6 An entity is just an instance in our world, but we need to add components to it that represent what that entity contains. For example if we have this components. data class Position ( var x : Float , var y : Float ) data class Player ( val name : String ) Now we could add to our entity the components that represent it. myEntity . add ( Postion ( x = 0.0f , y = 0.0f )) myEntity . add ( Player ( name = \"Jon\" )) Getting a component \u00b6 When we have a component we could get a component it has using their type. val player = myEntity . get < Player >() println ( \"the player is ${player.name}\" ) Adding the entity to our world \u00b6 Now that our entity has what we need we could add it to our world. world . add ( myEntity ) Creating a system \u00b6 Now that we have an entity in our world we need to add system that add behavior to them, in this example we will just move the position base on the delta time happen between updates. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } Update our world \u00b6 Now that we have our entities, components and systems we could ask for our world to update. while (...) { world . update () } This will invoke our System and update our entities according the logic it has. Using KECS DSL \u00b6 Since we are using Kotlin we could provide a DSL that simplify some steps that we did before. Creating our world \u00b6 With the dsl we could create a world and add system to it. val world = world { + MoveSystem () } Creating entities \u00b6 We could as well create entities with their components. val myEntity = entity { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } world . add ( myEntity ) Quick entity creation \u00b6 However, we could create entities and add them to our world with in one step. val myEntity = world . add { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } Creating Systems \u00b6 We look at before at creating a System, but we didn\u2019t get in the details of how they work. Independently time update \u00b6 If we look at the code of the System that we create before we could see the update function. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } When KECS is invoking the system update it will send to them the delta time from last update, and how long this has been running, this could be used to implement logic that is independent of the time that has passed, such moving an object independently of the frame rate. In this example we will move 5 units on x and y per second independently of how often / late our system get called. Creating Anonymous Systems \u00b6 So far we have created a System using a class, however we could creat Anonymous Systems. val world = world { + object : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } } Using Views \u00b6 Our KECS world is actually a View, a class that hold entities and provide methods to use them. Creating Views \u00b6 We could get a subview of a view just using the view function, giving the components that we are interested on. val view = world . view ( Position :: class , Velocity :: class ) This view will contain all the entities that has a Position and Velocity component. Iterating views \u00b6 Views implement the Iterable interface, so we could use normal Iterators functions. view . forEach { ... } view . sort { ... } view . groupBy { ... } Obtaining a single Entity \u00b6 Some times we may want to obtain a single Entity from a view. val entity1 = view . entity ( Player :: class ) This will return the entity that has a Player component, it will fail if we have more than one. Obtaining a set of components \u00b6 Other times we may want to get just the components from a set of entities, we could easily do that with. val components = view . components < Position >() This will return all the components on the view of that class. However, if you update the components they will be not update since you are not modifying the entity. Obtaining a single component \u00b6 In a very edge case scenario you may just want to get a single component, and you could that with. val component = view . component < Player >() Note that this will fail if you have more than one entity with that component.","title":"User Guide"},{"location":"guide/#basics","text":"To learn how to use KECS let\u2019s start with the basics.","title":"Basics"},{"location":"guide/#creating-our-world","text":"The first thing that we need for using KECS is to create our world, a object that will hold all of our entities, with their components, and systems. For this we could just do : val world = World ()","title":"Creating our world"},{"location":"guide/#adding-entities","text":"Now we need to add entities to our world. val myEntity = Entity ()","title":"Adding entities"},{"location":"guide/#adding-components","text":"An entity is just an instance in our world, but we need to add components to it that represent what that entity contains. For example if we have this components. data class Position ( var x : Float , var y : Float ) data class Player ( val name : String ) Now we could add to our entity the components that represent it. myEntity . add ( Postion ( x = 0.0f , y = 0.0f )) myEntity . add ( Player ( name = \"Jon\" ))","title":"Adding components"},{"location":"guide/#getting-a-component","text":"When we have a component we could get a component it has using their type. val player = myEntity . get < Player >() println ( \"the player is ${player.name}\" )","title":"Getting a component"},{"location":"guide/#adding-the-entity-to-our-world","text":"Now that our entity has what we need we could add it to our world. world . add ( myEntity )","title":"Adding the entity to our world"},{"location":"guide/#creating-a-system","text":"Now that we have an entity in our world we need to add system that add behavior to them, in this example we will just move the position base on the delta time happen between updates. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } }","title":"Creating a system"},{"location":"guide/#update-our-world","text":"Now that we have our entities, components and systems we could ask for our world to update. while (...) { world . update () } This will invoke our System and update our entities according the logic it has.","title":"Update our world"},{"location":"guide/#using-kecs-dsl","text":"Since we are using Kotlin we could provide a DSL that simplify some steps that we did before.","title":"Using KECS DSL"},{"location":"guide/#creating-our-world_1","text":"With the dsl we could create a world and add system to it. val world = world { + MoveSystem () }","title":"Creating our world"},{"location":"guide/#creating-entities","text":"We could as well create entities with their components. val myEntity = entity { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } world . add ( myEntity )","title":"Creating entities"},{"location":"guide/#quick-entity-creation","text":"However, we could create entities and add them to our world with in one step. val myEntity = world . add { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) }","title":"Quick entity creation"},{"location":"guide/#creating-systems","text":"We look at before at creating a System, but we didn\u2019t get in the details of how they work.","title":"Creating Systems"},{"location":"guide/#independently-time-update","text":"If we look at the code of the System that we create before we could see the update function. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } When KECS is invoking the system update it will send to them the delta time from last update, and how long this has been running, this could be used to implement logic that is independent of the time that has passed, such moving an object independently of the frame rate. In this example we will move 5 units on x and y per second independently of how often / late our system get called.","title":"Independently time update"},{"location":"guide/#creating-anonymous-systems","text":"So far we have created a System using a class, however we could creat Anonymous Systems. val world = world { + object : System () { override fun update ( delta : Float , total : Float , world : World ) { world . view ( Position :: class ). forEach { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } }","title":"Creating Anonymous Systems"},{"location":"guide/#using-views","text":"Our KECS world is actually a View, a class that hold entities and provide methods to use them.","title":"Using Views"},{"location":"guide/#creating-views","text":"We could get a subview of a view just using the view function, giving the components that we are interested on. val view = world . view ( Position :: class , Velocity :: class ) This view will contain all the entities that has a Position and Velocity component.","title":"Creating Views"},{"location":"guide/#iterating-views","text":"Views implement the Iterable interface, so we could use normal Iterators functions. view . forEach { ... } view . sort { ... } view . groupBy { ... }","title":"Iterating views"},{"location":"guide/#obtaining-a-single-entity","text":"Some times we may want to obtain a single Entity from a view. val entity1 = view . entity ( Player :: class ) This will return the entity that has a Player component, it will fail if we have more than one.","title":"Obtaining a single Entity"},{"location":"guide/#obtaining-a-set-of-components","text":"Other times we may want to get just the components from a set of entities, we could easily do that with. val components = view . components < Position >() This will return all the components on the view of that class. However, if you update the components they will be not update since you are not modifying the entity.","title":"Obtaining a set of components"},{"location":"guide/#obtaining-a-single-component","text":"In a very edge case scenario you may just want to get a single component, and you could that with. val component = view . component < Player >() Note that this will fail if you have more than one entity with that component.","title":"Obtaining a single component"},{"location":"packages/kecs/","text":"kecs KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. Packages \u00b6 Name Summary com.juanmedina.kecs root package for KECS com.juanmedina.kecs.dsl kotlin dsl for idiomatic creation of objects com.juanmedina.kecs.entity classes for creating entities and views com.juanmedina.kecs.platform platform specific classes com.juanmedina.kecs.system classes for creating systems Index \u00b6 All Types","title":"API Documentation"},{"location":"packages/kecs/#packages","text":"Name Summary com.juanmedina.kecs root package for KECS com.juanmedina.kecs.dsl kotlin dsl for idiomatic creation of objects com.juanmedina.kecs.entity classes for creating entities and views com.juanmedina.kecs.platform platform specific classes com.juanmedina.kecs.system classes for creating systems","title":"Packages"},{"location":"packages/kecs/#index","text":"All Types","title":"Index"},{"location":"packages/kecs/alltypes/","text":"KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. All Types \u00b6 Name Summary com.juanmedina.kecs.dsl.Dsl \u00b6 | com.juanmedina.kecs.entity.Entity \u00b6 | com.juanmedina.kecs.dsl.EntityDsl \u00b6 | com.juanmedina.kecs.platform.Platform \u00b6 | com.juanmedina.kecs.system.System \u00b6 | com.juanmedina.kecs.entity.View \u00b6 | com.juanmedina.kecs.World \u00b6 | com.juanmedina.kecs.dsl.WorldDsl \u00b6","title":"Index"},{"location":"packages/kecs/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsdsldsl","text":"|","title":"com.juanmedina.kecs.dsl.Dsl"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsentityentity","text":"|","title":"com.juanmedina.kecs.entity.Entity"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsdslentitydsl","text":"|","title":"com.juanmedina.kecs.dsl.EntityDsl"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsplatformplatform","text":"|","title":"com.juanmedina.kecs.platform.Platform"},{"location":"packages/kecs/alltypes/#comjuanmedinakecssystemsystem","text":"|","title":"com.juanmedina.kecs.system.System"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsentityview","text":"|","title":"com.juanmedina.kecs.entity.View"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsworld","text":"|","title":"com.juanmedina.kecs.World"},{"location":"packages/kecs/alltypes/#comjuanmedinakecsdslworlddsl","text":"","title":"com.juanmedina.kecs.dsl.WorldDsl"},{"location":"packages/kecs/com.juanmedina.kecs/","text":"kecs / com.juanmedina.kecs Package com.juanmedina.kecs \u00b6 root package for KECS Types \u00b6 Name Summary World class World : View","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs/#package-comjuanmedinakecs","text":"root package for KECS","title":"Package com.juanmedina.kecs"},{"location":"packages/kecs/com.juanmedina.kecs/#types","text":"Name Summary World class World : View","title":"Types"},{"location":"packages/kecs/com.juanmedina.kecs/-world/","text":"kecs / com.juanmedina.kecs / World World \u00b6 class World : View Constructors \u00b6 Name Summary <init> World() Functions \u00b6 Name Summary add fun add(system: System ): Unit update fun update(): Unit Extension Functions \u00b6 Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs/-world/#world","text":"class World : View","title":"World"},{"location":"packages/kecs/com.juanmedina.kecs/-world/#constructors","text":"Name Summary <init> World()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs/-world/#functions","text":"Name Summary add fun add(system: System ): Unit update fun update(): Unit","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs/-world/#extension-functions","text":"Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Extension Functions"},{"location":"packages/kecs/com.juanmedina.kecs/-world/-init-/","text":"kecs / com.juanmedina.kecs / World / <init> <init> \u00b6 World()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs/-world/-init-/#init","text":"World()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs/-world/add/","text":"kecs / com.juanmedina.kecs / World / add add \u00b6 fun add(system: System ): Unit","title":"Add"},{"location":"packages/kecs/com.juanmedina.kecs/-world/add/#add","text":"fun add(system: System ): Unit","title":"add"},{"location":"packages/kecs/com.juanmedina.kecs/-world/update/","text":"kecs / com.juanmedina.kecs / World / update update \u00b6 fun update(): Unit","title":"Update"},{"location":"packages/kecs/com.juanmedina.kecs/-world/update/#update","text":"fun update(): Unit","title":"update"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/","text":"kecs / com.juanmedina.kecs.dsl Package com.juanmedina.kecs.dsl \u00b6 kotlin dsl for idiomatic creation of objects Types \u00b6 Name Summary EntityDsl class EntityDsl WorldDsl class WorldDsl Annotations \u00b6 Name Summary Dsl annotation class Dsl Functions \u00b6 Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity entity fun entity(init: EntityDsl .() -> Unit ): Entity world fun world(init: WorldDsl .() -> Unit ): World","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/#package-comjuanmedinakecsdsl","text":"kotlin dsl for idiomatic creation of objects","title":"Package com.juanmedina.kecs.dsl"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/#types","text":"Name Summary EntityDsl class EntityDsl WorldDsl class WorldDsl","title":"Types"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/#annotations","text":"Name Summary Dsl annotation class Dsl","title":"Annotations"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/#functions","text":"Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity entity fun entity(init: EntityDsl .() -> Unit ): Entity world fun world(init: WorldDsl .() -> Unit ): World","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/add/","text":"kecs / com.juanmedina.kecs.dsl / add add \u00b6 fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Add"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/add/#add","text":"fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"add"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/entity/","text":"kecs / com.juanmedina.kecs.dsl / entity entity \u00b6 fun entity(init: EntityDsl .() -> Unit ): Entity","title":"Entity"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/entity/#entity","text":"fun entity(init: EntityDsl .() -> Unit ): Entity","title":"entity"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/world/","text":"kecs / com.juanmedina.kecs.dsl / world world \u00b6 fun world(init: WorldDsl .() -> Unit ): World","title":"World"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/world/#world","text":"fun world(init: WorldDsl .() -> Unit ): World","title":"world"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-dsl/","text":"kecs / com.juanmedina.kecs.dsl / Dsl Dsl \u00b6 @DslMarker annotation class Dsl Constructors \u00b6 Name Summary <init> Dsl()","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-dsl/#dsl","text":"@DslMarker annotation class Dsl","title":"Dsl"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-dsl/#constructors","text":"Name Summary <init> Dsl()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-dsl/-init-/","text":"kecs / com.juanmedina.kecs.dsl / Dsl / <init> <init> \u00b6 Dsl()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-dsl/-init-/#init","text":"Dsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/","text":"kecs / com.juanmedina.kecs.dsl / EntityDsl EntityDsl \u00b6 class EntityDsl Constructors \u00b6 Name Summary <init> EntityDsl() Properties \u00b6 Name Summary entity val entity: Entity Functions \u00b6 Name Summary entity fun entity(): Entity unaryPlus operator fun <T : Any > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/#entitydsl","text":"class EntityDsl","title":"EntityDsl"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/#constructors","text":"Name Summary <init> EntityDsl()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/#properties","text":"Name Summary entity val entity: Entity","title":"Properties"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/#functions","text":"Name Summary entity fun entity(): Entity unaryPlus operator fun <T : Any > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/-init-/","text":"kecs / com.juanmedina.kecs.dsl / EntityDsl / <init> <init> \u00b6 EntityDsl()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/-init-/#init","text":"EntityDsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/entity/","text":"kecs / com.juanmedina.kecs.dsl / EntityDsl / entity entity \u00b6 val entity: Entity fun entity(): Entity","title":"Entity"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/entity/#entity","text":"val entity: Entity fun entity(): Entity","title":"entity"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/unary-plus/","text":"kecs / com.juanmedina.kecs.dsl / EntityDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : Any > T.unaryPlus(): Unit","title":"Unary plus"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-entity-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : Any > T.unaryPlus(): Unit","title":"unaryPlus"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/","text":"kecs / com.juanmedina.kecs.dsl / WorldDsl WorldDsl \u00b6 class WorldDsl Constructors \u00b6 Name Summary <init> WorldDsl() Properties \u00b6 Name Summary ecs val ecs: World Functions \u00b6 Name Summary ecs fun ecs(): World unaryPlus operator fun <T : System > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/#worlddsl","text":"class WorldDsl","title":"WorldDsl"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/#constructors","text":"Name Summary <init> WorldDsl()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/#properties","text":"Name Summary ecs val ecs: World","title":"Properties"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/#functions","text":"Name Summary ecs fun ecs(): World unaryPlus operator fun <T : System > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/-init-/","text":"kecs / com.juanmedina.kecs.dsl / WorldDsl / <init> <init> \u00b6 WorldDsl()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/-init-/#init","text":"WorldDsl()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/ecs/","text":"kecs / com.juanmedina.kecs.dsl / WorldDsl / ecs ecs \u00b6 val ecs: World fun ecs(): World","title":"Ecs"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/ecs/#ecs","text":"val ecs: World fun ecs(): World","title":"ecs"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/unary-plus/","text":"kecs / com.juanmedina.kecs.dsl / WorldDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : System > T.unaryPlus(): Unit","title":"Unary plus"},{"location":"packages/kecs/com.juanmedina.kecs.dsl/-world-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : System > T.unaryPlus(): Unit","title":"unaryPlus"},{"location":"packages/kecs/com.juanmedina.kecs.entity/","text":"kecs / com.juanmedina.kecs.entity Package com.juanmedina.kecs.entity \u00b6 classes for creating entities and views Types \u00b6 Name Summary Entity class Entity View open class View : MutableCollection < Entity >","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.entity/#package-comjuanmedinakecsentity","text":"classes for creating entities and views","title":"Package com.juanmedina.kecs.entity"},{"location":"packages/kecs/com.juanmedina.kecs.entity/#types","text":"Name Summary Entity class Entity View open class View : MutableCollection < Entity >","title":"Types"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/","text":"kecs / com.juanmedina.kecs.entity / Entity Entity \u00b6 class Entity Constructors \u00b6 Name Summary <init> Entity() Properties \u00b6 Name Summary components val components: HashMap < KClass <*>, Any > Functions \u00b6 Name Summary add infix fun <T : Any > add(component: T): Unit get fun <T : Any > get(): T hasComponent fun <T : Any > hasComponent(): Boolean fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty fun isEmpty(): Boolean removeComponent fun <T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit set fun <T : Any > set(component: T): Unit","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/#entity","text":"class Entity","title":"Entity"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/#constructors","text":"Name Summary <init> Entity()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/#properties","text":"Name Summary components val components: HashMap < KClass <*>, Any >","title":"Properties"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/#functions","text":"Name Summary add infix fun <T : Any > add(component: T): Unit get fun <T : Any > get(): T hasComponent fun <T : Any > hasComponent(): Boolean fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty fun isEmpty(): Boolean removeComponent fun <T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit set fun <T : Any > set(component: T): Unit","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/-init-/","text":"kecs / com.juanmedina.kecs.entity / Entity / <init> <init> \u00b6 Entity()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/-init-/#init","text":"Entity()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/add/","text":"kecs / com.juanmedina.kecs.entity / Entity / add add \u00b6 infix fun <reified T : Any > add(component: T): Unit","title":"Add"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/add/#add","text":"infix fun <reified T : Any > add(component: T): Unit","title":"add"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/components/","text":"kecs / com.juanmedina.kecs.entity / Entity / components components \u00b6 val components: HashMap < KClass <*>, Any >","title":"Components"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/components/#components","text":"val components: HashMap < KClass <*>, Any >","title":"components"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/get/","text":"kecs / com.juanmedina.kecs.entity / Entity / get get \u00b6 fun <reified T : Any > get(): T","title":"Get"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/get/#get","text":"fun <reified T : Any > get(): T","title":"get"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/has-component/","text":"kecs / com.juanmedina.kecs.entity / Entity / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean","title":"Has component"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean","title":"hasComponent"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/has-components/","text":"kecs / com.juanmedina.kecs.entity / Entity / hasComponents hasComponents \u00b6 fun hasComponents(vararg types: KClass <out Any >): Boolean","title":"Has components"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/has-components/#hascomponents","text":"fun hasComponents(vararg types: KClass <out Any >): Boolean","title":"hasComponents"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/is-empty/","text":"kecs / com.juanmedina.kecs.entity / Entity / isEmpty isEmpty \u00b6 fun isEmpty(): Boolean","title":"Is empty"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/is-empty/#isempty","text":"fun isEmpty(): Boolean","title":"isEmpty"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/remove-component/","text":"kecs / com.juanmedina.kecs.entity / Entity / removeComponent removeComponent \u00b6 fun <reified T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit","title":"Remove component"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/remove-component/#removecomponent","text":"fun <reified T : Any > removeComponent(): Unit fun <T : Any > removeComponent(obj: T): Unit","title":"removeComponent"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/set/","text":"kecs / com.juanmedina.kecs.entity / Entity / set set \u00b6 fun <reified T : Any > set(component: T): Unit","title":"Set"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-entity/set/#set","text":"fun <reified T : Any > set(component: T): Unit","title":"set"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/","text":"kecs / com.juanmedina.kecs.entity / View View \u00b6 open class View : MutableCollection < Entity > Constructors \u00b6 Name Summary <init> View(entities: Iterable < Entity >) View() Properties \u00b6 Name Summary size open val size: Int Functions \u00b6 Name Summary add open fun add(element: Entity ): Boolean addAll open fun addAll(elements: Collection < Entity >): Boolean clear open fun clear(): Unit component fun <T : Any > component(): T components fun <T : Any > components(): List <T> contains open fun contains(element: Entity ): Boolean containsAll open fun containsAll(elements: Collection < Entity >): Boolean entity fun entity(vararg types: KClass <out Any >): Entity hasComponent fun <T : Any > hasComponent(): Boolean isEmpty open fun isEmpty(): Boolean iterator open fun iterator(): MutableIterator < Entity > remove open fun remove(element: Entity ): Boolean removeAll open fun removeAll(elements: Collection < Entity >): Boolean retainAll open fun retainAll(elements: Collection < Entity >): Boolean view fun view(vararg types: KClass <out Any >): View Extension Functions \u00b6 Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity Inheritors \u00b6 Name Summary World class World : View","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#view","text":"open class View : MutableCollection < Entity >","title":"View"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#constructors","text":"Name Summary <init> View(entities: Iterable < Entity >) View()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#properties","text":"Name Summary size open val size: Int","title":"Properties"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#functions","text":"Name Summary add open fun add(element: Entity ): Boolean addAll open fun addAll(elements: Collection < Entity >): Boolean clear open fun clear(): Unit component fun <T : Any > component(): T components fun <T : Any > components(): List <T> contains open fun contains(element: Entity ): Boolean containsAll open fun containsAll(elements: Collection < Entity >): Boolean entity fun entity(vararg types: KClass <out Any >): Entity hasComponent fun <T : Any > hasComponent(): Boolean isEmpty open fun isEmpty(): Boolean iterator open fun iterator(): MutableIterator < Entity > remove open fun remove(element: Entity ): Boolean removeAll open fun removeAll(elements: Collection < Entity >): Boolean retainAll open fun retainAll(elements: Collection < Entity >): Boolean view fun view(vararg types: KClass <out Any >): View","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#extension-functions","text":"Name Summary add fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Extension Functions"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/#inheritors","text":"Name Summary World class World : View","title":"Inheritors"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/-init-/","text":"kecs / com.juanmedina.kecs.entity / View / <init> <init> \u00b6 View(entities: Iterable < Entity >) View()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/-init-/#init","text":"View(entities: Iterable < Entity >) View()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/add-all/","text":"kecs / com.juanmedina.kecs.entity / View / addAll addAll \u00b6 open fun addAll(elements: Collection < Entity >): Boolean","title":"Add all"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/add-all/#addall","text":"open fun addAll(elements: Collection < Entity >): Boolean","title":"addAll"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/add/","text":"kecs / com.juanmedina.kecs.entity / View / add add \u00b6 open fun add(element: Entity ): Boolean","title":"Add"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/add/#add","text":"open fun add(element: Entity ): Boolean","title":"add"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/clear/","text":"kecs / com.juanmedina.kecs.entity / View / clear clear \u00b6 open fun clear(): Unit","title":"Clear"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/clear/#clear","text":"open fun clear(): Unit","title":"clear"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/component/","text":"kecs / com.juanmedina.kecs.entity / View / component component \u00b6 fun <reified T : Any > component(): T","title":"Component"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/component/#component","text":"fun <reified T : Any > component(): T","title":"component"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/components/","text":"kecs / com.juanmedina.kecs.entity / View / components components \u00b6 fun <reified T : Any > components(): List <T>","title":"Components"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/components/#components","text":"fun <reified T : Any > components(): List <T>","title":"components"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/contains-all/","text":"kecs / com.juanmedina.kecs.entity / View / containsAll containsAll \u00b6 open fun containsAll(elements: Collection < Entity >): Boolean","title":"Contains all"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/contains-all/#containsall","text":"open fun containsAll(elements: Collection < Entity >): Boolean","title":"containsAll"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/contains/","text":"kecs / com.juanmedina.kecs.entity / View / contains contains \u00b6 open fun contains(element: Entity ): Boolean","title":"Contains"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/contains/#contains","text":"open fun contains(element: Entity ): Boolean","title":"contains"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/entity/","text":"kecs / com.juanmedina.kecs.entity / View / entity entity \u00b6 fun entity(vararg types: KClass <out Any >): Entity","title":"Entity"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/entity/#entity","text":"fun entity(vararg types: KClass <out Any >): Entity","title":"entity"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/has-component/","text":"kecs / com.juanmedina.kecs.entity / View / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean","title":"Has component"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean","title":"hasComponent"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/is-empty/","text":"kecs / com.juanmedina.kecs.entity / View / isEmpty isEmpty \u00b6 open fun isEmpty(): Boolean","title":"Is empty"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/is-empty/#isempty","text":"open fun isEmpty(): Boolean","title":"isEmpty"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/iterator/","text":"kecs / com.juanmedina.kecs.entity / View / iterator iterator \u00b6 open fun iterator(): MutableIterator < Entity >","title":"Iterator"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/iterator/#iterator","text":"open fun iterator(): MutableIterator < Entity >","title":"iterator"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/remove-all/","text":"kecs / com.juanmedina.kecs.entity / View / removeAll removeAll \u00b6 open fun removeAll(elements: Collection < Entity >): Boolean","title":"Remove all"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/remove-all/#removeall","text":"open fun removeAll(elements: Collection < Entity >): Boolean","title":"removeAll"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/remove/","text":"kecs / com.juanmedina.kecs.entity / View / remove remove \u00b6 open fun remove(element: Entity ): Boolean","title":"Remove"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/remove/#remove","text":"open fun remove(element: Entity ): Boolean","title":"remove"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/retain-all/","text":"kecs / com.juanmedina.kecs.entity / View / retainAll retainAll \u00b6 open fun retainAll(elements: Collection < Entity >): Boolean","title":"Retain all"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/retain-all/#retainall","text":"open fun retainAll(elements: Collection < Entity >): Boolean","title":"retainAll"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/size/","text":"kecs / com.juanmedina.kecs.entity / View / size size \u00b6 open val size: Int","title":"Size"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/size/#size","text":"open val size: Int","title":"size"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/view/","text":"kecs / com.juanmedina.kecs.entity / View / view view \u00b6 fun view(vararg types: KClass <out Any >): View","title":"View"},{"location":"packages/kecs/com.juanmedina.kecs.entity/-view/view/#view","text":"fun view(vararg types: KClass <out Any >): View","title":"view"},{"location":"packages/kecs/com.juanmedina.kecs.platform/","text":"kecs / com.juanmedina.kecs.platform Package com.juanmedina.kecs.platform \u00b6 platform specific classes Types \u00b6 Name Summary Platform class Platform","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.platform/#package-comjuanmedinakecsplatform","text":"platform specific classes","title":"Package com.juanmedina.kecs.platform"},{"location":"packages/kecs/com.juanmedina.kecs.platform/#types","text":"Name Summary Platform class Platform","title":"Types"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/","text":"kecs / com.juanmedina.kecs.platform / Platform Platform \u00b6 class Platform Constructors \u00b6 Name Summary <init> Platform() Companion Object Functions \u00b6 Name Summary getSystemMillis fun getSystemMillis(): Long","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/#platform","text":"class Platform","title":"Platform"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/#constructors","text":"Name Summary <init> Platform()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/#companion-object-functions","text":"Name Summary getSystemMillis fun getSystemMillis(): Long","title":"Companion Object Functions"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/-init-/","text":"kecs / com.juanmedina.kecs.platform / Platform / <init> <init> \u00b6 Platform()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/-init-/#init","text":"Platform()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/get-system-millis/","text":"kecs / com.juanmedina.kecs.platform / Platform / getSystemMillis getSystemMillis \u00b6 fun getSystemMillis(): Long","title":"Get system millis"},{"location":"packages/kecs/com.juanmedina.kecs.platform/-platform/get-system-millis/#getsystemmillis","text":"fun getSystemMillis(): Long","title":"getSystemMillis"},{"location":"packages/kecs/com.juanmedina.kecs.system/","text":"kecs / com.juanmedina.kecs.system Package com.juanmedina.kecs.system \u00b6 classes for creating systems Types \u00b6 Name Summary System abstract class System","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.system/#package-comjuanmedinakecssystem","text":"classes for creating systems","title":"Package com.juanmedina.kecs.system"},{"location":"packages/kecs/com.juanmedina.kecs.system/#types","text":"Name Summary System abstract class System","title":"Types"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/","text":"kecs / com.juanmedina.kecs.system / System System \u00b6 abstract class System Constructors \u00b6 Name Summary <init> System() Functions \u00b6 Name Summary update abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"Index"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/#system","text":"abstract class System","title":"System"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/#constructors","text":"Name Summary <init> System()","title":"Constructors"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/#functions","text":"Name Summary update abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"Functions"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/-init-/","text":"kecs / com.juanmedina.kecs.system / System / <init> <init> \u00b6 System()","title":" init "},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/-init-/#init","text":"System()","title":"&lt;init&gt;"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/update/","text":"kecs / com.juanmedina.kecs.system / System / update update \u00b6 abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"Update"},{"location":"packages/kecs/com.juanmedina.kecs.system/-system/update/#update","text":"abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"update"}]}