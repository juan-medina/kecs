{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kotlin Entity Component System \u00b6 Kotlin Cross-platform Entity Component System Platforms \u00b6 Info \u00b6 KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. If you like to learn more about what is an ECS we try to give some clarification on this section . Installation \u00b6 Currently, KECS is not available in any distribution system, you need to clone and install it locally. > git clone git@github.com:juan-medina/kecs.git > cd keces > gradlew publishToMavenLocal This will install the multi-platform module for all the platforms in your system. Multi-platform gradle project \u00b6 If you are building a multi-platform gradle project you could add the overall module that will include all the dependencies for your specific platforms. kotlin { sourceSets { commonMain { dependencies { implementation kotlin ( 'stdlib-common' ) api ( 'com.juanmedina:kecs:0.0.1' ) } } } } For this to work you need to enable the gradle metadata module adding to the settings.gradle enableFeaturePreview ( 'GRADLE_METADATA' ) Single-platform gradle project \u00b6 For just adding as dependency for a simple platform you could do this in gradle: dependencies { api ( 'com.juanmedina:kecs-jvm:0.0.1' ) } Maven project \u00b6 If you use maven you need to include the dependencies of the platforms that you target: <dependency> <groupId> com.juanmedina </groupId> <artifactId> kecs-jvm </artifactId> <version> 0.0.1 </version> </dependency> Basic Usage \u00b6 This is a basic example, check the user guide , the advance example , or the API Documentation for learning more about using KECS. data class Velocity ( val x : Float , val y : Float ) data class Position ( var x : Float , var y : Float ) { operator fun plusAssign ( velocity : Velocity ) { x += velocity . x y += velocity . y } } class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . pairs < Velocity , Position > { ( vel , pos ) -> pos += vel } } } fun example () { val world = world { + MoveSystem () } val ent1 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.0f , 2.0f ) } val ent2 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.5f , 2.5f ) } val ent3 = world . add { + Position ( 0.0f , 0.0f ) } while (...) { world . update () } } License \u00b6 Copyright (C) 2020 Juan Medina Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"#kotlin-entity-component-system","text":"Kotlin Cross-platform Entity Component System","title":"Kotlin Entity Component System"},{"location":"#platforms","text":"","title":"Platforms"},{"location":"#info","text":"KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. If you like to learn more about what is an ECS we try to give some clarification on this section .","title":"Info"},{"location":"#installation","text":"Currently, KECS is not available in any distribution system, you need to clone and install it locally. > git clone git@github.com:juan-medina/kecs.git > cd keces > gradlew publishToMavenLocal This will install the multi-platform module for all the platforms in your system.","title":"Installation"},{"location":"#multi-platform-gradle-project","text":"If you are building a multi-platform gradle project you could add the overall module that will include all the dependencies for your specific platforms. kotlin { sourceSets { commonMain { dependencies { implementation kotlin ( 'stdlib-common' ) api ( 'com.juanmedina:kecs:0.0.1' ) } } } } For this to work you need to enable the gradle metadata module adding to the settings.gradle enableFeaturePreview ( 'GRADLE_METADATA' )","title":"Multi-platform gradle project"},{"location":"#single-platform-gradle-project","text":"For just adding as dependency for a simple platform you could do this in gradle: dependencies { api ( 'com.juanmedina:kecs-jvm:0.0.1' ) }","title":"Single-platform gradle project"},{"location":"#maven-project","text":"If you use maven you need to include the dependencies of the platforms that you target: <dependency> <groupId> com.juanmedina </groupId> <artifactId> kecs-jvm </artifactId> <version> 0.0.1 </version> </dependency>","title":"Maven project"},{"location":"#basic-usage","text":"This is a basic example, check the user guide , the advance example , or the API Documentation for learning more about using KECS. data class Velocity ( val x : Float , val y : Float ) data class Position ( var x : Float , var y : Float ) { operator fun plusAssign ( velocity : Velocity ) { x += velocity . x y += velocity . y } } class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . pairs < Velocity , Position > { ( vel , pos ) -> pos += vel } } } fun example () { val world = world { + MoveSystem () } val ent1 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.0f , 2.0f ) } val ent2 = world . add { + Position ( 0.0f , 0.0f ) + Velocity ( 1.5f , 2.5f ) } val ent3 = world . add { + Position ( 0.0f , 0.0f ) } while (...) { world . update () } }","title":"Basic Usage"},{"location":"#license","text":"Copyright (C) 2020 Juan Medina Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"ecs/","text":"Entities, components and systems \u00b6 Entity\u2013component\u2013system (ECS) is an architectural patter that follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a world. Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques. For a more in deep read on this topic I could recommend this article . Data-oriented Design \u00b6 A data oriented design is a design in which the logic of the application is built up of data sets, instead of procedural algorithms, they are highly optimized, specially because how computer organize data. For a more in deep read on this topic I could recommend this article . Understanding Data-oriented design for ECS \u00b6 On GDC 2019 Unity make a fascinating video about data-oriented design and ECS, and how this has a huge impact on performance, I strongly recommend watching this video.","title":"What is a ECS"},{"location":"ecs/#entities-components-and-systems","text":"Entity\u2013component\u2013system (ECS) is an architectural patter that follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a world. Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques. For a more in deep read on this topic I could recommend this article .","title":"Entities, components and systems"},{"location":"ecs/#data-oriented-design","text":"A data oriented design is a design in which the logic of the application is built up of data sets, instead of procedural algorithms, they are highly optimized, specially because how computer organize data. For a more in deep read on this topic I could recommend this article .","title":"Data-oriented Design"},{"location":"ecs/#understanding-data-oriented-design-for-ecs","text":"On GDC 2019 Unity make a fascinating video about data-oriented design and ECS, and how this has a huge impact on performance, I strongly recommend watching this video.","title":"Understanding Data-oriented design for ECS"},{"location":"example/","text":"Introduction \u00b6 Bellow we could see a advance example that tries to illustrate how to use an ECS to perform a concurrent task, in this example an animal race. This separate our entities components and systems , they concern and how they work with each other. Running the example \u00b6 If you like to run this example, from the root path of this project you could run the gradle task for your platform: > graddlew runSampleJvm > graddlew runSampleLinuxDebug > graddlew runSampleLinuxRelease Source Code \u00b6 You could browse this code on github . /* * Copyright (C) 2020 Juan Medina * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import com.juanmedina.kecs.dsl.add import com.juanmedina.kecs.dsl.world import com.juanmedina.kecs.system.System import com.juanmedina.kecs.world.World import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = world { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lureRef = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val ( lure , pos ) = lureRef . pair < Lure , Position >() println ( \"${lure.name} arrived in ${pos.time.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . pairs < Animal , Position >(). sortedBy { ( _ , position ) -> position . time }. forEachIndexed { place , ( animal , animalPos ) -> // get the components of the entity and display it println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${animalPos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // get entities that has position and movement world . pairs < Position , Movement > { ( position , movement ) -> // if we are running if ( movement . status == MovementStatus . Running ) { // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // if we dont have a winner if (! world . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure world . pairs < Position , Animal > { ( position , animal ) -> // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner world . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // first we will check if we aren't already ended if ( world . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = world . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended world . entity < RaceStatus >(). set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , world : World ) { // get from all entities that has position the position val positions = world . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { animalRace () }","title":"Advance Example"},{"location":"example/#introduction","text":"Bellow we could see a advance example that tries to illustrate how to use an ECS to perform a concurrent task, in this example an animal race. This separate our entities components and systems , they concern and how they work with each other.","title":"Introduction"},{"location":"example/#running-the-example","text":"If you like to run this example, from the root path of this project you could run the gradle task for your platform: > graddlew runSampleJvm > graddlew runSampleLinuxDebug > graddlew runSampleLinuxRelease","title":"Running the example"},{"location":"example/#source-code","text":"You could browse this code on github . /* * Copyright (C) 2020 Juan Medina * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import com.juanmedina.kecs.dsl.add import com.juanmedina.kecs.dsl.world import com.juanmedina.kecs.system.System import com.juanmedina.kecs.world.World import kotlin.math.min import kotlin.random.Random /** * Example of a animal race using a ECS, all animals will race following * a mechanical rabbit as lure. * * This example is has an inspiration of the classical * horse race example used to teach concurrency and threads. * * However since we use a ECS everything runs concurrently in a * single thread so we could have thousands of animals racing * without performance impact. * * The output of this program when running will be something like : * * 100 animals running.... * * Race complete: 100 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 9.976s * * Race end after 52830 loops * * The Winner is Forcibly Vocal Wasp! * * Mechanical Rabbit arrived in 5.0s * * Final lines: * * 1st Forcibly Vocal Wasp in 5.47s * 2nd Solely Working Guppy in 5.48s * 3rd Evenly Factual Cougar in 5.531s * 4st Suitably Elegant Piglet in 5.533s * .... * 97st Unlikely Assuring Hagfish in 9.864s * 98st Extremely Infinite Chipmunk in 9.926s * 99st Broadly Major Minnow in 9.954s * 100st Violently Charming Kangaroo in 9.974s9s * **/ // Constants /** How many animals will we have in our race **/ const val NUM_ANIMALS = 100 /** Minimal Speed of each animal, in ft/s **/ const val MIN_ANIMAL_SPEED = 30.0f /** Max Speed of each animal, ft/s **/ const val MAX_ANIMAL_SPEED = 55.0f /** Race length in yards **/ const val RACE_LENGTH_IN_YARDS = 100.0f /** Race length in feet **/ const val RACE_LENGTH = RACE_LENGTH_IN_YARDS * 3.0f /** The lure speed, it will reach the end in 5s **/ const val LURE_SPEED = RACE_LENGTH / 5.0f /** Number of blocks for our progress bar **/ const val NUM_BLOCKS = 30 // Components /** A lure component, it has just a name **/ data class Lure ( val name : String ) /** A animal component, it has just a name **/ data class Animal ( val name : String ) /** Movement status, running or stopped **/ enum class MovementStatus { Running , Stopped } /** A movement component, it has an speed, in ft/s, and a status **/ data class Movement ( val speed : Float , var status : MovementStatus = MovementStatus . Running ) /** A position component, includes how long has taking to be there **/ data class Position ( var at : Float , var time : Float = 0.0f ) /** A winner component, contains its name **/ data class Winner ( val name : String ) /** Race status, running or ended **/ enum class RaceStatus { Running , Ended } // Helpers /** get a random Float in a range **/ fun ClosedRange < Float >. random () = start + ( ( endInclusive - start ) * Random . nextFloat () ) /** get a random capitalized String from a String List **/ fun List < String >. randomCapitalize (): String { return this [ Random . nextInt ( 1 , this . size )]. capitalize () } /** get a random animal name like : Unlikely Assuring Hagfish **/ fun randomAnimalName () = \"${adverbs.randomCapitalize()} \" + \"${adjectives.randomCapitalize()} ${animals.randomCapitalize()}\" /** get a float with 3 decimals positions **/ fun Float . threeDecimals () = ( this * 1000 ). toInt () / 1000.0f /** get a string with suffix from a Int like: 1st, 2nd, 3rd.. **/ fun Int . withSuffix () = \"$this\" + when ( this ) { 1 -> \"st\" 2 -> \"nd\" 3 -> \"rd\" else -> \"st\" } /** format a int in three digits with spaces on the left **/ fun Int . threeDigits (): String { val digits = this . toString (). length val remaining = 3 - digits return \" \" . repeat ( remaining ) + \"$this\" } // our race fun animalRace () { // we will create our world adding 4 systems, each of them takes care of // only one concern // - the movement system it take care or moving things, both animals // and the lure // - the winner system will take care or knowing which animal won // - the race system will take care to know when the race has ended // - the progress system will draw a progress bar with the overall // completion, but it could be removed without affecting the logic val world = world { + MovementSystem () + WinnerSystem () + RaceSystem () + ProgressSystem () } // we create and entity that has the race status set to running world . add { + RaceStatus . Running } // we create the lure entity, with him name, at the initial position // and with movement set to the lure speed, we will save the reference // to use it latter val lureRef = world . add { + Lure ( name = \"Mechanical Rabbit\" ) + Position ( at = 0.0f ) + Movement ( speed = LURE_SPEED ) } // we will create as many entities as animal we need in the race for ( x in 1. . NUM_ANIMALS ) { // we add an entity that is an animal, with a random name // it will start at the initial position and have a // random speed between the min and max animal speed world . add { + Animal ( name = randomAnimalName ()) + Position ( at = 0.0f ) + Movement ( speed = ( MIN_ANIMAL_SPEED .. MAX_ANIMAL_SPEED ). random ()) } } println ( \"$NUM_ANIMALS animals running....\\n\" ) // we will count how many update loops we have done var loops = 0 // we will ask the world to return a single component from a single // entity that has a RaceStatus, and end the loop if the race has // ended while ( world . component < RaceStatus >() != RaceStatus . Ended ) { loops ++ // triggers the world update, each time it send the delta time from the // last update world . update () } println ( \"\\n\" ) // we will print the total loops, this number will be random since we have // random animal speeds they will take different time to complete the race println ( \"Race end after $loops loops\\n\" ) // we will get from the world the Winner component from a single entity, // it will contain the name of the animal that has won val winner = world . component < Winner >() println ( \"The Winner is ${winner.name}!\\n\" ) // we will get the name and time component from our lure entity using it // saved reference, surprisingly it will always take 5s val ( lure , pos ) = lureRef . pair < Lure , Position >() println ( \"${lure.name} arrived in ${pos.time.threeDecimals()}s \\n\" ) println ( \"Final lines:\\n\" ) // we will get all entities that has an Animal and a Position and sorted by // the time they take to rich that position world . pairs < Animal , Position >(). sortedBy { ( _ , position ) -> position . time }. forEachIndexed { place , ( animal , animalPos ) -> // get the components of the entity and display it println ( \"${(place + 1).withSuffix()} ${animal.name} in \" + \"${animalPos.time.threeDecimals()}s\" ) } } /** The system that move things, either animals or the lure **/ class MovementSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // get entities that has position and movement world . pairs < Position , Movement > { ( position , movement ) -> // if we are running if ( movement . status == MovementStatus . Running ) { // calculate the step base on delta time and speed val step = ( movement . speed * delta ) // calculate new position, without passing the end position . at = min ( position . at + step , RACE_LENGTH ) // add the time running position . time += delta // if we are at the end stop if ( position . at == RACE_LENGTH ) { movement . status = MovementStatus . Stopped } } } } } /** THe System that find a winner, only looking at animals, no lure **/ class WinnerSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // if we dont have a winner if (! world . hasComponent < Winner >()) { // get entities that are animal and has position, we // dont need movement, neither the lure world . pairs < Position , Animal > { ( position , animal ) -> // if we are at the end if ( position . at == RACE_LENGTH ) { // add to the world the winner world . add { + Winner ( animal . name ) } return @update } } } } } /** This System will check when to stop the race **/ class RaceSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { // first we will check if we aren't already ended if ( world . component < RaceStatus >() != RaceStatus . Ended ) { // get from all entities that has movement if they // are all stopped val allStopped = world . components < Movement >(). all { it . status == MovementStatus . Stopped } // if all are stopped if ( allStopped ) { // set that the race has ended world . entity < RaceStatus >(). set ( RaceStatus . Ended ) } } } } /** This System will draw a progress bar of the race **/ class ProgressSystem : System () { // how much time we have been racing var time = 0.0f // last update, we don't want to update the progress all // the time, just when the time change (using 3 decimals) var lastUpdate = Float . MIN_VALUE /** display a progress bar like: * * text 22 % [\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592] 1.592s * **/ private fun drawBar ( completion : Float , time : Float , text : String ) { // get the blocks to fill \u2588 val blocksToFill = ( NUM_BLOCKS * completion ). toInt () val filledBlocks = \"\u2588\" . repeat ( blocksToFill ) // get the blocks empty | val blocksEmpty = NUM_BLOCKS - blocksToFill val emptyBlocks = \"\u2592\" . repeat ( blocksEmpty ) // calculate the percentage val percent = ( completion * 100 ). toInt () // compose the bar, we use \\r to reset the cursor print ( \"\\r$text ${percent.threeDigits()} % \" + \"[$filledBlocks$emptyBlocks] \" + \"${time.threeDecimals()}s \" ) } override fun update ( delta : Float , total : Float , world : World ) { // get from all entities that has position the position val positions = world . components < Position >() // if we average all that we have run so far and divide by the // length of the race we will have the overall completion (0..1) of // the race val completion = positions . map { it . at }. average (). toFloat () / RACE_LENGTH // We accumulate the race time time += delta // we round the time to three decimals val update = time . threeDecimals () // if update time has change from the last update if ( update != lastUpdate ) { // draw the bar drawBar ( completion , update , \"Race complete:\" ) // store last update lastUpdate = update } } } /** just random animals **/ val animals : List < String > = listOf ( \"ox\" , \"ant\" , \"ape\" , \"asp\" , \"bat\" , \"bee\" , \"boa\" , \"bug\" , \"cat\" , \"cod\" , \"cow\" , \"cub\" , \"doe\" , \"dog\" , \"eel\" , \"eft\" , \"elf\" , \"elk\" , \"emu\" , \"ewe\" , \"fly\" , \"fox\" , \"gar\" , \"gnu\" , \"hen\" , \"hog\" , \"imp\" , \"jay\" , \"kid\" , \"kit\" , \"koi\" , \"lab\" , \"man\" , \"owl\" , \"pig\" , \"pug\" , \"pup\" , \"ram\" , \"rat\" , \"ray\" , \"yak\" , \"bass\" , \"bear\" , \"bird\" , \"boar\" , \"buck\" , \"bull\" , \"calf\" , \"chow\" , \"clam\" , \"colt\" , \"crab\" , \"crow\" , \"dane\" , \"deer\" , \"dodo\" , \"dory\" , \"dove\" , \"drum\" , \"duck\" , \"fawn\" , \"fish\" , \"flea\" , \"foal\" , \"fowl\" , \"frog\" , \"gnat\" , \"goat\" , \"grub\" , \"gull\" , \"hare\" , \"hawk\" , \"ibex\" , \"joey\" , \"kite\" , \"kiwi\" , \"lamb\" , \"lark\" , \"lion\" , \"loon\" , \"lynx\" , \"mako\" , \"mink\" , \"mite\" , \"mole\" , \"moth\" , \"mule\" , \"mutt\" , \"newt\" , \"orca\" , \"oryx\" , \"pika\" , \"pony\" , \"puma\" , \"seal\" , \"shad\" , \"slug\" , \"sole\" , \"stag\" , \"stud\" , \"swan\" , \"tahr\" , \"teal\" , \"tick\" , \"toad\" , \"tuna\" , \"wasp\" , \"wolf\" , \"worm\" , \"wren\" , \"yeti\" , \"adder\" , \"akita\" , \"alien\" , \"aphid\" , \"bison\" , \"boxer\" , \"bream\" , \"bunny\" , \"burro\" , \"camel\" , \"chimp\" , \"civet\" , \"cobra\" , \"coral\" , \"corgi\" , \"crane\" , \"dingo\" , \"drake\" , \"eagle\" , \"egret\" , \"filly\" , \"finch\" , \"gator\" , \"gecko\" , \"ghost\" , \"ghoul\" , \"goose\" , \"guppy\" , \"heron\" , \"hippo\" , \"horse\" , \"hound\" , \"husky\" , \"hyena\" , \"koala\" , \"krill\" , \"leech\" , \"lemur\" , \"liger\" , \"llama\" , \"louse\" , \"macaw\" , \"midge\" , \"molly\" , \"moose\" , \"moray\" , \"mouse\" , \"panda\" , \"perch\" , \"prawn\" , \"quail\" , \"racer\" , \"raven\" , \"rhino\" , \"robin\" , \"satyr\" , \"shark\" , \"sheep\" , \"shrew\" , \"skink\" , \"skunk\" , \"sloth\" , \"snail\" , \"snake\" , \"snipe\" , \"squid\" , \"stork\" , \"swift\" , \"swine\" , \"tapir\" , \"tetra\" , \"tiger\" , \"troll\" , \"trout\" , \"viper\" , \"wahoo\" , \"whale\" , \"zebra\" , \"alpaca\" , \"amoeba\" , \"baboon\" , \"badger\" , \"beagle\" , \"bedbug\" , \"beetle\" , \"bengal\" , \"bobcat\" , \"caiman\" , \"cattle\" , \"cicada\" , \"collie\" , \"condor\" , \"cougar\" , \"coyote\" , \"dassie\" , \"donkey\" , \"dragon\" , \"earwig\" , \"falcon\" , \"feline\" , \"ferret\" , \"gannet\" , \"gibbon\" , \"glider\" , \"goblin\" , \"gopher\" , \"grouse\" , \"guinea\" , \"hermit\" , \"hornet\" , \"iguana\" , \"impala\" , \"insect\" , \"jackal\" , \"jaguar\" , \"jennet\" , \"kitten\" , \"kodiak\" , \"lizard\" , \"locust\" , \"maggot\" , \"magpie\" , \"mammal\" , \"mantis\" , \"marlin\" , \"marmot\" , \"marten\" , \"martin\" , \"mayfly\" , \"minnow\" , \"monkey\" , \"mullet\" , \"muskox\" , \"ocelot\" , \"oriole\" , \"osprey\" , \"oyster\" , \"parrot\" , \"pigeon\" , \"piglet\" , \"poodle\" , \"possum\" , \"python\" , \"quagga\" , \"rabbit\" , \"raptor\" , \"rodent\" , \"roughy\" , \"salmon\" , \"sawfly\" , \"serval\" , \"shiner\" , \"shrimp\" , \"spider\" , \"sponge\" , \"tarpon\" , \"thrush\" , \"tomcat\" , \"toucan\" , \"turkey\" , \"turtle\" , \"urchin\" , \"vervet\" , \"walrus\" , \"weasel\" , \"weevil\" , \"wombat\" , \"anchovy\" , \"anemone\" , \"bluejay\" , \"buffalo\" , \"bulldog\" , \"buzzard\" , \"caribou\" , \"catfish\" , \"chamois\" , \"cheetah\" , \"chicken\" , \"chigger\" , \"cowbird\" , \"crappie\" , \"crawdad\" , \"cricket\" , \"dogfish\" , \"dolphin\" , \"firefly\" , \"garfish\" , \"gazelle\" , \"gelding\" , \"giraffe\" , \"gobbler\" , \"gorilla\" , \"goshawk\" , \"grackle\" , \"griffon\" , \"grizzly\" , \"grouper\" , \"gryphon\" , \"haddock\" , \"hagfish\" , \"halibut\" , \"hamster\" , \"herring\" , \"jackass\" , \"javelin\" , \"jawfish\" , \"jaybird\" , \"katydid\" , \"ladybug\" , \"lamprey\" , \"lemming\" , \"leopard\" , \"lioness\" , \"lobster\" , \"macaque\" , \"mallard\" , \"mammoth\" , \"manatee\" , \"mastiff\" , \"meerkat\" , \"mollusk\" , \"monarch\" , \"mongrel\" , \"monitor\" , \"monster\" , \"mudfish\" , \"muskrat\" , \"mustang\" , \"narwhal\" , \"oarfish\" , \"octopus\" , \"opossum\" , \"ostrich\" , \"panther\" , \"peacock\" , \"pegasus\" , \"pelican\" , \"penguin\" , \"phoenix\" , \"piranha\" , \"polecat\" , \"primate\" , \"quetzal\" , \"raccoon\" , \"rattler\" , \"redbird\" , \"redfish\" , \"reptile\" , \"rooster\" , \"sawfish\" , \"sculpin\" , \"seagull\" , \"skylark\" , \"snapper\" , \"spaniel\" , \"sparrow\" , \"sunbeam\" , \"sunbird\" , \"sunfish\" , \"tadpole\" , \"termite\" , \"terrier\" , \"unicorn\" , \"vulture\" , \"wallaby\" , \"walleye\" , \"warthog\" , \"whippet\" , \"wildcat\" , \"aardvark\" , \"airedale\" , \"albacore\" , \"anteater\" , \"antelope\" , \"arachnid\" , \"barnacle\" , \"basilisk\" , \"blowfish\" , \"bluebird\" , \"bluegill\" , \"bonefish\" , \"bullfrog\" , \"cardinal\" , \"chipmunk\" , \"cockatoo\" , \"crawfish\" , \"crayfish\" , \"dinosaur\" , \"doberman\" , \"duckling\" , \"elephant\" , \"escargot\" , \"flamingo\" , \"flounder\" , \"foxhound\" , \"glowworm\" , \"goldfish\" , \"grubworm\" , \"hedgehog\" , \"honeybee\" , \"hookworm\" , \"humpback\" , \"kangaroo\" , \"killdeer\" , \"kingfish\" , \"labrador\" , \"lacewing\" , \"ladybird\" , \"lionfish\" , \"longhorn\" , \"mackerel\" , \"malamute\" , \"marmoset\" , \"mastodon\" , \"moccasin\" , \"mongoose\" , \"monkfish\" , \"mosquito\" , \"pangolin\" , \"parakeet\" , \"pheasant\" , \"pipefish\" , \"platypus\" , \"polliwog\" , \"porpoise\" , \"reindeer\" , \"ringtail\" , \"sailfish\" , \"scorpion\" , \"seahorse\" , \"seasnail\" , \"sheepdog\" , \"shepherd\" , \"silkworm\" , \"squirrel\" , \"stallion\" , \"starfish\" , \"starling\" , \"stingray\" , \"stinkbug\" , \"sturgeon\" , \"terrapin\" , \"titmouse\" , \"tortoise\" , \"treefrog\" , \"werewolf\" , \"woodcock\" ) /** just random adjectives **/ val adjectives : List < String > = listOf ( \"able\" , \"above\" , \"absolute\" , \"accepted\" , \"accurate\" , \"ace\" , \"active\" , \"actual\" , \"adapted\" , \"adapting\" , \"adequate\" , \"adjusted\" , \"advanced\" , \"alert\" , \"alive\" , \"allowed\" , \"allowing\" , \"amazed\" , \"amazing\" , \"ample\" , \"amused\" , \"amusing\" , \"apparent\" , \"apt\" , \"arriving\" , \"artistic\" , \"assured\" , \"assuring\" , \"awaited\" , \"awake\" , \"aware\" , \"balanced\" , \"becoming\" , \"beloved\" , \"better\" , \"big\" , \"blessed\" , \"bold\" , \"boss\" , \"brave\" , \"brief\" , \"bright\" , \"bursting\" , \"busy\" , \"calm\" , \"capable\" , \"capital\" , \"careful\" , \"caring\" , \"casual\" , \"causal\" , \"central\" , \"certain\" , \"champion\" , \"charmed\" , \"charming\" , \"cheerful\" , \"chief\" , \"choice\" , \"civil\" , \"classic\" , \"clean\" , \"clear\" , \"clever\" , \"climbing\" , \"close\" , \"closing\" , \"coherent\" , \"comic\" , \"communal\" , \"complete\" , \"composed\" , \"concise\" , \"concrete\" , \"content\" , \"cool\" , \"correct\" , \"cosmic\" , \"crack\" , \"creative\" , \"credible\" , \"crisp\" , \"crucial\" , \"cuddly\" , \"cunning\" , \"curious\" , \"current\" , \"cute\" , \"daring\" , \"darling\" , \"dashing\" , \"dear\" , \"decent\" , \"deciding\" , \"deep\" , \"definite\" , \"delicate\" , \"desired\" , \"destined\" , \"devoted\" , \"direct\" , \"discrete\" , \"distinct\" , \"diverse\" , \"divine\" , \"dominant\" , \"driven\" , \"driving\" , \"dynamic\" , \"eager\" , \"easy\" , \"electric\" , \"elegant\" , \"emerging\" , \"eminent\" , \"enabled\" , \"enabling\" , \"endless\" , \"engaged\" , \"engaging\" , \"enhanced\" , \"enjoyed\" , \"enormous\" , \"enough\" , \"epic\" , \"equal\" , \"equipped\" , \"eternal\" , \"ethical\" , \"evident\" , \"evolved\" , \"evolving\" , \"exact\" , \"excited\" , \"exciting\" , \"exotic\" , \"expert\" , \"factual\" , \"fair\" , \"faithful\" , \"famous\" , \"fancy\" , \"fast\" , \"feasible\" , \"fine\" , \"finer\" , \"firm\" , \"first\" , \"fit\" , \"fitting\" , \"fleet\" , \"flexible\" , \"flowing\" , \"fluent\" , \"flying\" , \"fond\" , \"frank\" , \"free\" , \"fresh\" , \"full\" , \"fun\" , \"funny\" , \"game\" , \"generous\" , \"gentle\" , \"genuine\" , \"giving\" , \"glad\" , \"glorious\" , \"glowing\" , \"golden\" , \"good\" , \"gorgeous\" , \"grand\" , \"grateful\" , \"great\" , \"growing\" , \"grown\" , \"guided\" , \"guiding\" , \"handy\" , \"happy\" , \"hardy\" , \"harmless\" , \"healthy\" , \"helped\" , \"helpful\" , \"helping\" , \"heroic\" , \"hip\" , \"holy\" , \"honest\" , \"hopeful\" , \"hot\" , \"huge\" , \"humane\" , \"humble\" , \"humorous\" , \"ideal\" , \"immense\" , \"immortal\" , \"immune\" , \"improved\" , \"in\" , \"included\" , \"infinite\" , \"informed\" , \"innocent\" , \"inspired\" , \"integral\" , \"intense\" , \"intent\" , \"internal\" , \"intimate\" , \"inviting\" , \"joint\" , \"just\" , \"keen\" , \"key\" , \"kind\" , \"knowing\" , \"known\" , \"large\" , \"lasting\" , \"leading\" , \"learning\" , \"legal\" , \"legible\" , \"lenient\" , \"liberal\" , \"light\" , \"liked\" , \"literate\" , \"live\" , \"living\" , \"logical\" , \"loved\" , \"loving\" , \"loyal\" , \"lucky\" , \"magical\" , \"magnetic\" , \"main\" , \"major\" , \"many\" , \"massive\" , \"master\" , \"mature\" , \"maximum\" , \"measured\" , \"meet\" , \"merry\" , \"mighty\" , \"mint\" , \"model\" , \"modern\" , \"modest\" , \"moral\" , \"more\" , \"moved\" , \"moving\" , \"musical\" , \"mutual\" , \"national\" , \"native\" , \"natural\" , \"nearby\" , \"neat\" , \"needed\" , \"neutral\" , \"new\" , \"next\" , \"nice\" , \"noble\" , \"normal\" , \"notable\" , \"noted\" , \"novel\" , \"obliging\" , \"on\" , \"one\" , \"open\" , \"optimal\" , \"optimum\" , \"organic\" , \"oriented\" , \"outgoing\" , \"patient\" , \"peaceful\" , \"perfect\" , \"pet\" , \"picked\" , \"pleasant\" , \"pleased\" , \"pleasing\" , \"poetic\" , \"polished\" , \"polite\" , \"popular\" , \"positive\" , \"possible\" , \"powerful\" , \"precious\" , \"precise\" , \"premium\" , \"prepared\" , \"present\" , \"pretty\" , \"primary\" , \"prime\" , \"pro\" , \"probable\" , \"profound\" , \"promoted\" , \"prompt\" , \"proper\" , \"proud\" , \"proven\" , \"pumped\" , \"pure\" , \"quality\" , \"quick\" , \"quiet\" , \"rapid\" , \"rare\" , \"rational\" , \"ready\" , \"real\" , \"refined\" , \"regular\" , \"related\" , \"relative\" , \"relaxed\" , \"relaxing\" , \"relevant\" , \"relieved\" , \"renewed\" , \"renewing\" , \"resolved\" , \"rested\" , \"rich\" , \"right\" , \"robust\" , \"romantic\" , \"ruling\" , \"sacred\" , \"safe\" , \"saved\" , \"saving\" , \"secure\" , \"select\" , \"selected\" , \"sensible\" , \"set\" , \"settled\" , \"settling\" , \"sharing\" , \"sharp\" , \"shining\" , \"simple\" , \"sincere\" , \"singular\" , \"skilled\" , \"smart\" , \"smashing\" , \"smiling\" , \"smooth\" , \"social\" , \"solid\" , \"sought\" , \"sound\" , \"special\" , \"splendid\" , \"square\" , \"stable\" , \"star\" , \"steady\" , \"sterling\" , \"still\" , \"stirred\" , \"stirring\" , \"striking\" , \"strong\" , \"stunning\" , \"subtle\" , \"suitable\" , \"suited\" , \"summary\" , \"sunny\" , \"super\" , \"superb\" , \"supreme\" , \"sure\" , \"sweeping\" , \"sweet\" , \"talented\" , \"teaching\" , \"tender\" , \"thankful\" , \"thorough\" , \"tidy\" , \"tight\" , \"together\" , \"tolerant\" , \"top\" , \"topical\" , \"tops\" , \"touched\" , \"touching\" , \"tough\" , \"true\" , \"trusted\" , \"trusting\" , \"trusty\" , \"ultimate\" , \"unbiased\" , \"uncommon\" , \"unified\" , \"unique\" , \"united\" , \"up\" , \"upright\" , \"upward\" , \"usable\" , \"useful\" , \"valid\" , \"valued\" , \"vast\" , \"verified\" , \"viable\" , \"vital\" , \"vocal\" , \"wanted\" , \"warm\" , \"wealthy\" , \"welcome\" , \"welcomed\" , \"well\" , \"whole\" , \"willing\" , \"winning\" , \"wired\" , \"wise\" , \"witty\" , \"wondrous\" , \"workable\" , \"working\" , \"worthy\" ) /** just random adverbs **/ val adverbs : List < String > = listOf ( \"abnormally\" , \"absolutely\" , \"accurately\" , \"actively\" , \"actually\" , \"adequately\" , \"admittedly\" , \"adversely\" , \"allegedly\" , \"amazingly\" , \"annually\" , \"apparently\" , \"arguably\" , \"awfully\" , \"badly\" , \"barely\" , \"basically\" , \"blatantly\" , \"blindly\" , \"briefly\" , \"brightly\" , \"broadly\" , \"carefully\" , \"centrally\" , \"certainly\" , \"cheaply\" , \"cleanly\" , \"clearly\" , \"closely\" , \"commonly\" , \"completely\" , \"constantly\" , \"conversely\" , \"correctly\" , \"curiously\" , \"currently\" , \"daily\" , \"deadly\" , \"deeply\" , \"definitely\" , \"directly\" , \"distinctly\" , \"duly\" , \"eagerly\" , \"early\" , \"easily\" , \"eminently\" , \"endlessly\" , \"enormously\" , \"entirely\" , \"equally\" , \"especially\" , \"evenly\" , \"evidently\" , \"exactly\" , \"explicitly\" , \"externally\" , \"extremely\" , \"factually\" , \"fairly\" , \"finally\" , \"firmly\" , \"firstly\" , \"forcibly\" , \"formally\" , \"formerly\" , \"frankly\" , \"freely\" , \"frequently\" , \"friendly\" , \"fully\" , \"generally\" , \"gently\" , \"genuinely\" , \"ghastly\" , \"gladly\" , \"globally\" , \"gradually\" , \"gratefully\" , \"greatly\" , \"grossly\" , \"happily\" , \"hardly\" , \"heartily\" , \"heavily\" , \"hideously\" , \"highly\" , \"honestly\" , \"hopefully\" , \"hopelessly\" , \"horribly\" , \"hugely\" , \"humbly\" , \"ideally\" , \"illegally\" , \"immensely\" , \"implicitly\" , \"incredibly\" , \"indirectly\" , \"infinitely\" , \"informally\" , \"inherently\" , \"initially\" , \"instantly\" , \"intensely\" , \"internally\" , \"jointly\" , \"jolly\" , \"kindly\" , \"largely\" , \"lately\" , \"legally\" , \"lightly\" , \"likely\" , \"literally\" , \"lively\" , \"locally\" , \"logically\" , \"loosely\" , \"loudly\" , \"lovely\" , \"luckily\" , \"mainly\" , \"manually\" , \"marginally\" , \"mentally\" , \"merely\" , \"mildly\" , \"miserably\" , \"mistakenly\" , \"moderately\" , \"monthly\" , \"morally\" , \"mostly\" , \"multiply\" , \"mutually\" , \"namely\" , \"nationally\" , \"naturally\" , \"nearly\" , \"neatly\" , \"needlessly\" , \"newly\" , \"nicely\" , \"nominally\" , \"normally\" , \"notably\" , \"noticeably\" , \"obviously\" , \"oddly\" , \"officially\" , \"only\" , \"openly\" , \"optionally\" , \"overly\" , \"painfully\" , \"partially\" , \"partly\" , \"perfectly\" , \"personally\" , \"physically\" , \"plainly\" , \"pleasantly\" , \"poorly\" , \"positively\" , \"possibly\" , \"precisely\" , \"preferably\" , \"presently\" , \"presumably\" , \"previously\" , \"primarily\" , \"privately\" , \"probably\" , \"promptly\" , \"properly\" , \"publicly\" , \"purely\" , \"quickly\" , \"quietly\" , \"radically\" , \"randomly\" , \"rapidly\" , \"rarely\" , \"rationally\" , \"readily\" , \"really\" , \"reasonably\" , \"recently\" , \"regularly\" , \"reliably\" , \"remarkably\" , \"remotely\" , \"repeatedly\" , \"rightly\" , \"roughly\" , \"routinely\" , \"sadly\" , \"safely\" , \"scarcely\" , \"secondly\" , \"secretly\" , \"seemingly\" , \"sensibly\" , \"separately\" , \"seriously\" , \"severely\" , \"sharply\" , \"shortly\" , \"similarly\" , \"simply\" , \"sincerely\" , \"singularly\" , \"slightly\" , \"slowly\" , \"smoothly\" , \"socially\" , \"solely\" , \"specially\" , \"steadily\" , \"strangely\" , \"strictly\" , \"strongly\" , \"subtly\" , \"suddenly\" , \"suitably\" , \"supposedly\" , \"surely\" , \"terminally\" , \"terribly\" , \"thankfully\" , \"thoroughly\" , \"tightly\" , \"totally\" , \"trivially\" , \"truly\" , \"typically\" , \"ultimately\" , \"unduly\" , \"uniformly\" , \"uniquely\" , \"unlikely\" , \"urgently\" , \"usefully\" , \"usually\" , \"utterly\" , \"vaguely\" , \"vastly\" , \"verbally\" , \"vertically\" , \"vigorously\" , \"violently\" , \"virtually\" , \"visually\" , \"weekly\" , \"wholly\" , \"widely\" , \"wildly\" , \"willingly\" , \"wrongly\" , \"yearly\" ) fun main () { animalRace () }","title":"Source Code"},{"location":"guide/","text":"Basics \u00b6 To learn how to use KECS let\u2019s start with the basics. Creating our world \u00b6 The first thing that we need for using KECS is to create our world, a object that will hold all of our entities, with their components, and systems. For this we could just do : val world = World () Adding entities \u00b6 Now we need to add entities to our world. val myEntity = Entity () Adding components \u00b6 An entity is just an instance in our world, but we need to add components to it that represent what that entity contains. For example if we have this components. data class Position ( var x : Float , var y : Float ) data class Player ( val name : String ) Now we could add to our entity the components that represent it. myEntity . add ( Postion ( x = 0.0f , y = 0.0f )) myEntity . add ( Player ( name = \"Jon\" )) Getting a component \u00b6 When we have a component we could get a component it has using their type. val player = myEntity . get < Player >() println ( \"the player is ${player.name}\" ) Getting Destructuring \u00b6 We could have Destructuring declarations to obtain components using pair or triple. val ( vel , pos ) = myEntity . pair < Velocity , Position >() val ( vel , pos , player ) = myEntity . triple < Velocity , Position , Player >() Adding the entity to our world \u00b6 Now that our entity has what we need we could add it to our world. world . add ( myEntity ) Creating a system \u00b6 Now that we have an entity in our world we need to add system that add behavior to them, in this example we will just move the position base on the delta time happen between updates. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } Update our world \u00b6 Now that we have our entities, components and systems we could ask for our world to update. while (...) { world . update () } This will invoke our System and update our entities according the logic it has. Using KECS DSL \u00b6 Since we are using Kotlin we could provide a DSL that simplify some steps that we did before. Creating our world \u00b6 With the dsl we could create a world and add system to it. val world = world { + MoveSystem () } Creating entities \u00b6 We could as well create entities with their components. val myEntity = entity { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } world . add ( myEntity ) Quick entity creation \u00b6 However, we could create entities and add them to our world with in one step. val myEntity = world . add { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } Creating Systems \u00b6 We look at before at creating a System, but we didn\u2019t get in the details of how they work. Independently time update \u00b6 If we look at the code of the System that we create before we could see the update function. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } When KECS is invoking the system update it will send to them the delta time from last update, and how long this has been running, this could be used to implement logic that is independent of the time that has passed, such moving an object independently of the frame rate. In this example we will move 5 units on x and y per second independently of how often / late our system get called. Creating Anonymous Systems \u00b6 So far we have created a System using a class, however we could creat Anonymous Systems. val world = world { + object : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } } Using Views \u00b6 Our KECS world is actually a View, a class that hold entities and provide methods to use them. Creating Views \u00b6 We could get a subview of a view just using the view function, giving the components that we are interested on. val view = world . view ( Position :: class , Velocity :: class ) Creating views from pairs \u00b6 We can creat views from pairs val view = world . pairs < Position , Velocity >() view . forEach { ( pos , vel ) -> // do something with pos and vel } //or val view = world . pairs < Position , Velocity > { ( pos , vel ) -> // do something with pos and vel } Creating views from triples \u00b6 We can creat views from pairs val view = world . triples < Position , Velocity , Player >() view . forEach { ( pos , vel , player ) -> // do something with pos, vel and player } //or val view = world . pairs < Position , Velocity > { ( pos , vel , player ) -> // do something with pos, vel and player } This view will contain all the entities that has a Position and Velocity component. Iterating views \u00b6 Views implement the Iterable interface, so we could use normal Iterators functions. view . forEach { ... } view . sort { ... } view . groupBy { ... } Obtaining a single Entity \u00b6 Some times we may want to obtain a single Entity from a view. val entity1 = view . entity ( Player :: class ) //or val entity1 = view . entity < Player >() Obtaining a set of Entities \u00b6 Some times we may want to obtain a set Entities from a view. val entity1 = view . entitie ( Player :: class ) //or val entity1 = view . entitie < Player >() Obtaining Pairs of Entities \u00b6 Some times we may want to obtain a set of pairs from Entities int a view. view . pairs < Player , Position > { ( player , pos ) -> // do something with player and pos } //or val entities = view . pairs < Player , Position >() entities . forEach { ( player , pos ) -> // do something with player and pos } Obtaining Triples of Entities \u00b6 Some times we may want to obtain a set of triples from Entities int a view. view . triple < Player , Position , Velocity > { ( player , pos , vel ) -> // do something with player, pos and velocity } //or val entities = view . pairs < Player , Position >() entities . forEach { ( player , pos , vel ) -> // do something with player, pos and velocity } This will return the entity that has a Player component, it will fail if we have more than one. Obtaining a set of components \u00b6 Other times we may want to get just the components from a set of entities, we could easily do that with. val components = view . components < Position >() This will return all the components on the view of that class. However, if you update the components they will be not update since you are not modifying the entity. Obtaining a single component \u00b6 In a very edge case scenario you may just want to get a single component, and you could that with. val component = view . component < Player >() Note that this will fail if you have more than one entity with that component.","title":"User Guide"},{"location":"guide/#basics","text":"To learn how to use KECS let\u2019s start with the basics.","title":"Basics"},{"location":"guide/#creating-our-world","text":"The first thing that we need for using KECS is to create our world, a object that will hold all of our entities, with their components, and systems. For this we could just do : val world = World ()","title":"Creating our world"},{"location":"guide/#adding-entities","text":"Now we need to add entities to our world. val myEntity = Entity ()","title":"Adding entities"},{"location":"guide/#adding-components","text":"An entity is just an instance in our world, but we need to add components to it that represent what that entity contains. For example if we have this components. data class Position ( var x : Float , var y : Float ) data class Player ( val name : String ) Now we could add to our entity the components that represent it. myEntity . add ( Postion ( x = 0.0f , y = 0.0f )) myEntity . add ( Player ( name = \"Jon\" ))","title":"Adding components"},{"location":"guide/#getting-a-component","text":"When we have a component we could get a component it has using their type. val player = myEntity . get < Player >() println ( \"the player is ${player.name}\" )","title":"Getting a component"},{"location":"guide/#getting-destructuring","text":"We could have Destructuring declarations to obtain components using pair or triple. val ( vel , pos ) = myEntity . pair < Velocity , Position >() val ( vel , pos , player ) = myEntity . triple < Velocity , Position , Player >()","title":"Getting Destructuring"},{"location":"guide/#adding-the-entity-to-our-world","text":"Now that our entity has what we need we could add it to our world. world . add ( myEntity )","title":"Adding the entity to our world"},{"location":"guide/#creating-a-system","text":"Now that we have an entity in our world we need to add system that add behavior to them, in this example we will just move the position base on the delta time happen between updates. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } }","title":"Creating a system"},{"location":"guide/#update-our-world","text":"Now that we have our entities, components and systems we could ask for our world to update. while (...) { world . update () } This will invoke our System and update our entities according the logic it has.","title":"Update our world"},{"location":"guide/#using-kecs-dsl","text":"Since we are using Kotlin we could provide a DSL that simplify some steps that we did before.","title":"Using KECS DSL"},{"location":"guide/#creating-our-world_1","text":"With the dsl we could create a world and add system to it. val world = world { + MoveSystem () }","title":"Creating our world"},{"location":"guide/#creating-entities","text":"We could as well create entities with their components. val myEntity = entity { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) } world . add ( myEntity )","title":"Creating entities"},{"location":"guide/#quick-entity-creation","text":"However, we could create entities and add them to our world with in one step. val myEntity = world . add { + Postion ( x = 0.0f , y = 0.0f ) + Player ( name = \"Jon\" ) }","title":"Quick entity creation"},{"location":"guide/#creating-systems","text":"We look at before at creating a System, but we didn\u2019t get in the details of how they work.","title":"Creating Systems"},{"location":"guide/#independently-time-update","text":"If we look at the code of the System that we create before we could see the update function. class MoveSystem : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } When KECS is invoking the system update it will send to them the delta time from last update, and how long this has been running, this could be used to implement logic that is independent of the time that has passed, such moving an object independently of the frame rate. In this example we will move 5 units on x and y per second independently of how often / late our system get called.","title":"Independently time update"},{"location":"guide/#creating-anonymous-systems","text":"So far we have created a System using a class, however we could creat Anonymous Systems. val world = world { + object : System () { override fun update ( delta : Float , total : Float , world : World ) { world . entities < Position > { val pos = it . get < Position >() pos . x += 5.0f * delta pos . y += 5.0f * delta } } } }","title":"Creating Anonymous Systems"},{"location":"guide/#using-views","text":"Our KECS world is actually a View, a class that hold entities and provide methods to use them.","title":"Using Views"},{"location":"guide/#creating-views","text":"We could get a subview of a view just using the view function, giving the components that we are interested on. val view = world . view ( Position :: class , Velocity :: class )","title":"Creating Views"},{"location":"guide/#creating-views-from-pairs","text":"We can creat views from pairs val view = world . pairs < Position , Velocity >() view . forEach { ( pos , vel ) -> // do something with pos and vel } //or val view = world . pairs < Position , Velocity > { ( pos , vel ) -> // do something with pos and vel }","title":"Creating views from pairs"},{"location":"guide/#creating-views-from-triples","text":"We can creat views from pairs val view = world . triples < Position , Velocity , Player >() view . forEach { ( pos , vel , player ) -> // do something with pos, vel and player } //or val view = world . pairs < Position , Velocity > { ( pos , vel , player ) -> // do something with pos, vel and player } This view will contain all the entities that has a Position and Velocity component.","title":"Creating views from triples"},{"location":"guide/#iterating-views","text":"Views implement the Iterable interface, so we could use normal Iterators functions. view . forEach { ... } view . sort { ... } view . groupBy { ... }","title":"Iterating views"},{"location":"guide/#obtaining-a-single-entity","text":"Some times we may want to obtain a single Entity from a view. val entity1 = view . entity ( Player :: class ) //or val entity1 = view . entity < Player >()","title":"Obtaining a single Entity"},{"location":"guide/#obtaining-a-set-of-entities","text":"Some times we may want to obtain a set Entities from a view. val entity1 = view . entitie ( Player :: class ) //or val entity1 = view . entitie < Player >()","title":"Obtaining a set of Entities"},{"location":"guide/#obtaining-pairs-of-entities","text":"Some times we may want to obtain a set of pairs from Entities int a view. view . pairs < Player , Position > { ( player , pos ) -> // do something with player and pos } //or val entities = view . pairs < Player , Position >() entities . forEach { ( player , pos ) -> // do something with player and pos }","title":"Obtaining Pairs of Entities"},{"location":"guide/#obtaining-triples-of-entities","text":"Some times we may want to obtain a set of triples from Entities int a view. view . triple < Player , Position , Velocity > { ( player , pos , vel ) -> // do something with player, pos and velocity } //or val entities = view . pairs < Player , Position >() entities . forEach { ( player , pos , vel ) -> // do something with player, pos and velocity } This will return the entity that has a Player component, it will fail if we have more than one.","title":"Obtaining Triples of Entities"},{"location":"guide/#obtaining-a-set-of-components","text":"Other times we may want to get just the components from a set of entities, we could easily do that with. val components = view . components < Position >() This will return all the components on the view of that class. However, if you update the components they will be not update since you are not modifying the entity.","title":"Obtaining a set of components"},{"location":"guide/#obtaining-a-single-component","text":"In a very edge case scenario you may just want to get a single component, and you could that with. val component = view . component < Player >() Note that this will fail if you have more than one entity with that component.","title":"Obtaining a single component"},{"location":"packages/-k-e-c-s/","text":"KECS KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. It allows separating data from behavior and get rid of deep object oriented inheritance. Due to data-oriented design allow modern processors to highly optimize it for an over perform of more traditional systems. Packages \u00b6 Name Summary com.juanmedina.kecs.dsl kotlin dsl for idiomatic creation of objects com.juanmedina.kecs.entity classes for using entities and views com.juanmedina.kecs.platform platform specific classes com.juanmedina.kecs.system classes for creating systems com.juanmedina.kecs.world classes for managing our ECS world Index \u00b6 All Types","title":"API Documentation"},{"location":"packages/-k-e-c-s/#packages","text":"Name Summary com.juanmedina.kecs.dsl kotlin dsl for idiomatic creation of objects com.juanmedina.kecs.entity classes for using entities and views com.juanmedina.kecs.platform platform specific classes com.juanmedina.kecs.system classes for creating systems com.juanmedina.kecs.world classes for managing our ECS world","title":"Packages"},{"location":"packages/-k-e-c-s/#index","text":"All Types","title":"Index"},{"location":"packages/-k-e-c-s/alltypes/","text":"KECS is a Cross-platform Entity Component System design to create concurrent applications, such games, more simple and without the need of using multiple threads neither fibers nor corutines. All Types \u00b6 Name Summary com.juanmedina.kecs.entity.Entity \u00b6 An Entity represent a instance of an object in our world. | com.juanmedina.kecs.dsl.EntityDsl \u00b6 DSL for creating a Entity . | com.juanmedina.kecs.system.System \u00b6 A system take care of update our world base on the entities of the our world. | com.juanmedina.kecs.entity.View \u00b6 A View represent a set of entities in World . | com.juanmedina.kecs.world.World \u00b6 Contains all the entities and systems on our ECS . | com.juanmedina.kecs.dsl.WorldDsl \u00b6 DSL for creating a World .","title":"Index"},{"location":"packages/-k-e-c-s/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecsentityentity","text":"An Entity represent a instance of an object in our world. |","title":"com.juanmedina.kecs.entity.Entity"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecsdslentitydsl","text":"DSL for creating a Entity . |","title":"com.juanmedina.kecs.dsl.EntityDsl"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecssystemsystem","text":"A system take care of update our world base on the entities of the our world. |","title":"com.juanmedina.kecs.system.System"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecsentityview","text":"A View represent a set of entities in World . |","title":"com.juanmedina.kecs.entity.View"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecsworldworld","text":"Contains all the entities and systems on our ECS . |","title":"com.juanmedina.kecs.world.World"},{"location":"packages/-k-e-c-s/alltypes/#comjuanmedinakecsdslworlddsl","text":"DSL for creating a World .","title":"com.juanmedina.kecs.dsl.WorldDsl"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/","text":"KECS / com.juanmedina.kecs.dsl Package com.juanmedina.kecs.dsl \u00b6 kotlin dsl for idiomatic creation of objects Types \u00b6 Name Summary EntityDsl DSL for creating a Entity . class EntityDsl WorldDsl DSL for creating a World . class WorldDsl Functions \u00b6 Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity entity DSL for creating entities using EntityDsl . fun entity(init: EntityDsl .() -> Unit ): Entity world DSL for creating a World using WorldDsl . fun world(init: WorldDsl .() -> Unit ): World","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/#package-comjuanmedinakecsdsl","text":"kotlin dsl for idiomatic creation of objects","title":"Package com.juanmedina.kecs.dsl"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/#types","text":"Name Summary EntityDsl DSL for creating a Entity . class EntityDsl WorldDsl DSL for creating a World . class WorldDsl","title":"Types"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/#functions","text":"Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity entity DSL for creating entities using EntityDsl . fun entity(init: EntityDsl .() -> Unit ): Entity world DSL for creating a World using WorldDsl . fun world(init: WorldDsl .() -> Unit ): World","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/add/","text":"KECS / com.juanmedina.kecs.dsl / add add \u00b6 fun View .add(init: EntityDsl .() -> Unit ): Entity DSL for adding entities using EntityDsl . Parameters \u00b6 init - A lambda receiver that will get a EntityDsl . Return a new created Entity .","title":"Add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/add/#add","text":"fun View .add(init: EntityDsl .() -> Unit ): Entity DSL for adding entities using EntityDsl .","title":"add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/add/#parameters","text":"init - A lambda receiver that will get a EntityDsl . Return a new created Entity .","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/entity/","text":"KECS / com.juanmedina.kecs.dsl / entity entity \u00b6 fun entity(init: EntityDsl .() -> Unit ): Entity DSL for creating entities using EntityDsl . Parameters \u00b6 init - A lambda receiver that will get a EntityDsl . Return a new created Entity .","title":"Entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/entity/#entity","text":"fun entity(init: EntityDsl .() -> Unit ): Entity DSL for creating entities using EntityDsl .","title":"entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/entity/#parameters","text":"init - A lambda receiver that will get a EntityDsl . Return a new created Entity .","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/world/","text":"KECS / com.juanmedina.kecs.dsl / world world \u00b6 fun world(init: WorldDsl .() -> Unit ): World DSL for creating a World using WorldDsl . Parameters \u00b6 init - A lambda receiver that will get a WorldDsl . Return a new created World .","title":"World"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/world/#world","text":"fun world(init: WorldDsl .() -> Unit ): World DSL for creating a World using WorldDsl .","title":"world"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/world/#parameters","text":"init - A lambda receiver that will get a WorldDsl . Return a new created World .","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/","text":"KECS / com.juanmedina.kecs.dsl / EntityDsl EntityDsl \u00b6 class EntityDsl DSL for creating a Entity . Properties \u00b6 Name Summary entity the Entity that this DSL will return. val entity: Entity Functions \u00b6 Name Summary unaryPlus Unary plus operator to use inside the DSL receiver. operator fun <T : Any > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/#entitydsl","text":"class EntityDsl DSL for creating a Entity .","title":"EntityDsl"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/#properties","text":"Name Summary entity the Entity that this DSL will return. val entity: Entity","title":"Properties"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/#functions","text":"Name Summary unaryPlus Unary plus operator to use inside the DSL receiver. operator fun <T : Any > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/entity/","text":"KECS / com.juanmedina.kecs.dsl / EntityDsl / entity entity \u00b6 val entity: Entity the Entity that this DSL will return.","title":"Entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/entity/#entity","text":"val entity: Entity the Entity that this DSL will return.","title":"entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/unary-plus/","text":"KECS / com.juanmedina.kecs.dsl / EntityDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : Any > T.unaryPlus(): Unit Unary plus operator to use inside the DSL receiver.","title":"Unary plus"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-entity-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : Any > T.unaryPlus(): Unit Unary plus operator to use inside the DSL receiver.","title":"unaryPlus"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/","text":"KECS / com.juanmedina.kecs.dsl / WorldDsl WorldDsl \u00b6 class WorldDsl DSL for creating a World . Properties \u00b6 Name Summary world the World that this DSL will return. val world: World Functions \u00b6 Name Summary unaryPlus Unary plus operator to use inside the DSL receiver. operator fun <T : System > T.unaryPlus(): Unit","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/#worlddsl","text":"class WorldDsl DSL for creating a World .","title":"WorldDsl"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/#properties","text":"Name Summary world the World that this DSL will return. val world: World","title":"Properties"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/#functions","text":"Name Summary unaryPlus Unary plus operator to use inside the DSL receiver. operator fun <T : System > T.unaryPlus(): Unit","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/unary-plus/","text":"KECS / com.juanmedina.kecs.dsl / WorldDsl / unaryPlus unaryPlus \u00b6 operator fun <reified T : System > T.unaryPlus(): Unit Unary plus operator to use inside the DSL receiver.","title":"Unary plus"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/unary-plus/#unaryplus","text":"operator fun <reified T : System > T.unaryPlus(): Unit Unary plus operator to use inside the DSL receiver.","title":"unaryPlus"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/world/","text":"KECS / com.juanmedina.kecs.dsl / WorldDsl / world world \u00b6 val world: World the World that this DSL will return.","title":"World"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.dsl/-world-dsl/world/#world","text":"val world: World the World that this DSL will return.","title":"world"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/","text":"KECS / com.juanmedina.kecs.entity Package com.juanmedina.kecs.entity \u00b6 classes for using entities and views Types \u00b6 Name Summary Entity An Entity represent a instance of an object in our world. class Entity View A View represent a set of entities in World . open class View : MutableCollection < Entity >","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/#package-comjuanmedinakecsentity","text":"classes for using entities and views","title":"Package com.juanmedina.kecs.entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/#types","text":"Name Summary Entity An Entity represent a instance of an object in our world. class Entity View A View represent a set of entities in World . open class View : MutableCollection < Entity >","title":"Types"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/","text":"KECS / com.juanmedina.kecs.entity / Entity Entity \u00b6 class Entity An Entity represent a instance of an object in our world. An entity has a set of components, that are just simple data objects tha has the values for our entity. Constructors \u00b6 Name Summary <init> An Entity represent a instance of an object in our world. Entity() Properties \u00b6 Name Summary components The components that this entity has val components: HashMap < KClass <*>, Any > Functions \u00b6 Name Summary add Add a component to this entity. infix fun <T : Any > add(component: T): Unit get Gets a component from the entity of the given type. fun <T : Any > get(): T hasComponent Checks if an entity contains a component of the given type. fun <T : Any > hasComponent(): Boolean Checks if an entity contains a components of the given KClass . fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents Checks if an entity contains a set of components of the given KClass . fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty Checks if a entity is empty, so it has not component. fun isEmpty(): Boolean pair Creates a Pair from two components types. fun <T : Any , K : Any > pair(): Pair <T, K> removeComponent Removes a component of the given type from this entity. fun <T : Any > removeComponent(): Unit Removes a component of from this entity giving the component reference. fun <T : Any > removeComponent(component: T): Unit set Sets the value component in this entity. fun <T : Any > set(component: T): Unit triple Creates a Triple from three components types fun <T : Any , K : Any , V : Any > triple(): Triple <T, K, V>","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/#entity","text":"class Entity An Entity represent a instance of an object in our world. An entity has a set of components, that are just simple data objects tha has the values for our entity.","title":"Entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/#constructors","text":"Name Summary <init> An Entity represent a instance of an object in our world. Entity()","title":"Constructors"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/#properties","text":"Name Summary components The components that this entity has val components: HashMap < KClass <*>, Any >","title":"Properties"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/#functions","text":"Name Summary add Add a component to this entity. infix fun <T : Any > add(component: T): Unit get Gets a component from the entity of the given type. fun <T : Any > get(): T hasComponent Checks if an entity contains a component of the given type. fun <T : Any > hasComponent(): Boolean Checks if an entity contains a components of the given KClass . fun <T : Any > hasComponent(type: KClass <out T>): Boolean hasComponents Checks if an entity contains a set of components of the given KClass . fun hasComponents(vararg types: KClass <out Any >): Boolean isEmpty Checks if a entity is empty, so it has not component. fun isEmpty(): Boolean pair Creates a Pair from two components types. fun <T : Any , K : Any > pair(): Pair <T, K> removeComponent Removes a component of the given type from this entity. fun <T : Any > removeComponent(): Unit Removes a component of from this entity giving the component reference. fun <T : Any > removeComponent(component: T): Unit set Sets the value component in this entity. fun <T : Any > set(component: T): Unit triple Creates a Triple from three components types fun <T : Any , K : Any , V : Any > triple(): Triple <T, K, V>","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/-init-/","text":"KECS / com.juanmedina.kecs.entity / Entity / <init> <init> \u00b6 Entity() An Entity represent a instance of an object in our world. An entity has a set of components, that are just simple data objects tha has the values for our entity.","title":" init "},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/-init-/#init","text":"Entity() An Entity represent a instance of an object in our world. An entity has a set of components, that are just simple data objects tha has the values for our entity.","title":"&lt;init&gt;"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/add/","text":"KECS / com.juanmedina.kecs.entity / Entity / add add \u00b6 infix fun <reified T : Any > add(component: T): Unit Add a component to this entity. Parameters \u00b6 component - the component to add to the entity, we can have only one per the given type.","title":"Add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/add/#add","text":"infix fun <reified T : Any > add(component: T): Unit Add a component to this entity.","title":"add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/add/#parameters","text":"component - the component to add to the entity, we can have only one per the given type.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/components/","text":"KECS / com.juanmedina.kecs.entity / Entity / components components \u00b6 val components: HashMap < KClass <*>, Any > The components that this entity has We could have only one component per given type.","title":"Components"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/components/#components","text":"val components: HashMap < KClass <*>, Any > The components that this entity has We could have only one component per given type.","title":"components"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/get/","text":"KECS / com.juanmedina.kecs.entity / Entity / get get \u00b6 fun <reified T : Any > get(): T Gets a component from the entity of the given type.","title":"Get"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/get/#get","text":"fun <reified T : Any > get(): T Gets a component from the entity of the given type.","title":"get"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-component/","text":"KECS / com.juanmedina.kecs.entity / Entity / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean Checks if an entity contains a component of the given type. fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean Checks if an entity contains a components of the given KClass . Parameters \u00b6 type - the KClass of the component.","title":"Has component"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean Checks if an entity contains a component of the given type. fun <reified T : Any > hasComponent(type: KClass <out T>): Boolean Checks if an entity contains a components of the given KClass .","title":"hasComponent"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-component/#parameters","text":"type - the KClass of the component.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-components/","text":"KECS / com.juanmedina.kecs.entity / Entity / hasComponents hasComponents \u00b6 fun hasComponents(vararg types: KClass <out Any >): Boolean Checks if an entity contains a set of components of the given KClass . Parameters \u00b6 types - the KClass of the components.","title":"Has components"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-components/#hascomponents","text":"fun hasComponents(vararg types: KClass <out Any >): Boolean Checks if an entity contains a set of components of the given KClass .","title":"hasComponents"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/has-components/#parameters","text":"types - the KClass of the components.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/is-empty/","text":"KECS / com.juanmedina.kecs.entity / Entity / isEmpty isEmpty \u00b6 fun isEmpty(): Boolean Checks if a entity is empty, so it has not component.","title":"Is empty"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/is-empty/#isempty","text":"fun isEmpty(): Boolean Checks if a entity is empty, so it has not component.","title":"isEmpty"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/pair/","text":"KECS / com.juanmedina.kecs.entity / Entity / pair pair \u00b6 fun <reified T : Any , reified K : Any > pair(): Pair <T, K> Creates a Pair from two components types. This can be use for a Destructuring declaration.","title":"Pair"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/pair/#pair","text":"fun <reified T : Any , reified K : Any > pair(): Pair <T, K> Creates a Pair from two components types. This can be use for a Destructuring declaration.","title":"pair"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/remove-component/","text":"KECS / com.juanmedina.kecs.entity / Entity / removeComponent removeComponent \u00b6 fun <reified T : Any > removeComponent(): Unit Removes a component of the given type from this entity. fun <T : Any > removeComponent(component: T): Unit Removes a component of from this entity giving the component reference. Parameters \u00b6 component - a reference to the component to be removed.","title":"Remove component"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/remove-component/#removecomponent","text":"fun <reified T : Any > removeComponent(): Unit Removes a component of the given type from this entity. fun <T : Any > removeComponent(component: T): Unit Removes a component of from this entity giving the component reference.","title":"removeComponent"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/remove-component/#parameters","text":"component - a reference to the component to be removed.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/set/","text":"KECS / com.juanmedina.kecs.entity / Entity / set set \u00b6 fun <reified T : Any > set(component: T): Unit Sets the value component in this entity. Parameters \u00b6 component - the component to set in the entity, we can have only one per the given type.","title":"Set"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/set/#set","text":"fun <reified T : Any > set(component: T): Unit Sets the value component in this entity.","title":"set"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/set/#parameters","text":"component - the component to set in the entity, we can have only one per the given type.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/triple/","text":"KECS / com.juanmedina.kecs.entity / Entity / triple triple \u00b6 fun <reified T : Any , reified K : Any , reified V : Any > triple(): Triple <T, K, V> Creates a Triple from three components types This can be use for a Destructuring declaration.","title":"Triple"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-entity/triple/#triple","text":"fun <reified T : Any , reified K : Any , reified V : Any > triple(): Triple <T, K, V> Creates a Triple from three components types This can be use for a Destructuring declaration.","title":"triple"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/","text":"KECS / com.juanmedina.kecs.entity / View View \u00b6 open class View : MutableCollection < Entity > A View represent a set of entities in World . Constructors \u00b6 Name Summary <init> Creates a empty View . View() Properties \u00b6 Name Summary size Number of entities in our View. open val size: Int Functions \u00b6 Name Summary add Adds a Entity to our view. open fun add(element: Entity ): Boolean addAll Add a set of entities to our view. open fun addAll(elements: Collection < Entity >): Boolean clear Clear all the entities in our view. open fun clear(): Unit component Return a single component from a single Entity that has a component of the giving type, or throws exception if there is more than one. fun <T : Any > component(): T components Return the components in our view for a giving class. fun <T : Any > components(): List <T> contains Checks if a Entity exists in our view. open fun contains(element: Entity ): Boolean containsAll Checks if a set of entities exists in our view. open fun containsAll(elements: Collection < Entity >): Boolean entities Return a set entities that has a component of the giving type. fun <T : Any > entities(): List < Entity > Send to a receiver a set of entities that has a component of the giving type. fun <T : Any > entities(receiver: ( Entity ) -> Unit ): Unit entity Return a single Entity that has a component of the giving types, or throws exception if there is more than one. fun entity(vararg types: KClass <out Any >): Entity Return a single Entity that has a component of the giving type, or throws exception if there is more than one. fun <T : Any > entity(): Entity hasComponent Check if we have a any Entity with a given component type. fun <T : Any > hasComponent(): Boolean isEmpty Check if the view has not entities . open fun isEmpty(): Boolean iterator Obtain an Iterator of the entities in our view. open fun iterator(): MutableIterator < Entity > pairs Return a set of Pair from the components of the given type. fun <T : Any , K : Any > pairs(): List < Pair <T, K>> Send a set of Pair from the components of the given type to a receiver. fun <T : Any , K : Any > pairs(receiver: ( Pair <T, K>) -> Unit ): Unit remove Removes a specific Entity in our view. open fun remove(element: Entity ): Boolean removeAll Remove a set of entities in our view. open fun removeAll(elements: Collection < Entity >): Boolean retainAll Remove all entities in a view no matching the ones provided. open fun retainAll(elements: Collection < Entity >): Boolean triples Return a set of Triple from the components of the given type. fun <T : Any , K : Any , V : Any > triples(): List < Triple <T, K, V>> Send a set of Triple from the components of the given type to a receiver. fun <T : Any , K : Any , V : Any > triples(receiver: ( Triple <T, K, V>) -> Unit ): Unit view Create a sub-view giving a set of component classes. fun view(vararg types: KClass <out Any >): View Send to a receiver a set of Entities for the given types fun view(vararg types: KClass <out Any >, receiver: ( Entity ) -> Unit ): Unit Extension Functions \u00b6 Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity Inheritors \u00b6 Name Summary World Contains all the entities and systems on our ECS . class World : View","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#view","text":"open class View : MutableCollection < Entity > A View represent a set of entities in World .","title":"View"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#constructors","text":"Name Summary <init> Creates a empty View . View()","title":"Constructors"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#properties","text":"Name Summary size Number of entities in our View. open val size: Int","title":"Properties"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#functions","text":"Name Summary add Adds a Entity to our view. open fun add(element: Entity ): Boolean addAll Add a set of entities to our view. open fun addAll(elements: Collection < Entity >): Boolean clear Clear all the entities in our view. open fun clear(): Unit component Return a single component from a single Entity that has a component of the giving type, or throws exception if there is more than one. fun <T : Any > component(): T components Return the components in our view for a giving class. fun <T : Any > components(): List <T> contains Checks if a Entity exists in our view. open fun contains(element: Entity ): Boolean containsAll Checks if a set of entities exists in our view. open fun containsAll(elements: Collection < Entity >): Boolean entities Return a set entities that has a component of the giving type. fun <T : Any > entities(): List < Entity > Send to a receiver a set of entities that has a component of the giving type. fun <T : Any > entities(receiver: ( Entity ) -> Unit ): Unit entity Return a single Entity that has a component of the giving types, or throws exception if there is more than one. fun entity(vararg types: KClass <out Any >): Entity Return a single Entity that has a component of the giving type, or throws exception if there is more than one. fun <T : Any > entity(): Entity hasComponent Check if we have a any Entity with a given component type. fun <T : Any > hasComponent(): Boolean isEmpty Check if the view has not entities . open fun isEmpty(): Boolean iterator Obtain an Iterator of the entities in our view. open fun iterator(): MutableIterator < Entity > pairs Return a set of Pair from the components of the given type. fun <T : Any , K : Any > pairs(): List < Pair <T, K>> Send a set of Pair from the components of the given type to a receiver. fun <T : Any , K : Any > pairs(receiver: ( Pair <T, K>) -> Unit ): Unit remove Removes a specific Entity in our view. open fun remove(element: Entity ): Boolean removeAll Remove a set of entities in our view. open fun removeAll(elements: Collection < Entity >): Boolean retainAll Remove all entities in a view no matching the ones provided. open fun retainAll(elements: Collection < Entity >): Boolean triples Return a set of Triple from the components of the given type. fun <T : Any , K : Any , V : Any > triples(): List < Triple <T, K, V>> Send a set of Triple from the components of the given type to a receiver. fun <T : Any , K : Any , V : Any > triples(receiver: ( Triple <T, K, V>) -> Unit ): Unit view Create a sub-view giving a set of component classes. fun view(vararg types: KClass <out Any >): View Send to a receiver a set of Entities for the given types fun view(vararg types: KClass <out Any >, receiver: ( Entity ) -> Unit ): Unit","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#extension-functions","text":"Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Extension Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/#inheritors","text":"Name Summary World Contains all the entities and systems on our ECS . class World : View","title":"Inheritors"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/-init-/","text":"KECS / com.juanmedina.kecs.entity / View / <init> <init> \u00b6 View() Creates a empty View . Constructor Creates a empty View .","title":" init "},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/-init-/#init","text":"View() Creates a empty View . Constructor Creates a empty View .","title":"&lt;init&gt;"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add-all/","text":"KECS / com.juanmedina.kecs.entity / View / addAll addAll \u00b6 open fun addAll(elements: Collection < Entity >): Boolean Add a set of entities to our view. Parameters \u00b6 elements - entities to add to our view.","title":"Add all"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add-all/#addall","text":"open fun addAll(elements: Collection < Entity >): Boolean Add a set of entities to our view.","title":"addAll"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add-all/#parameters","text":"elements - entities to add to our view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add/","text":"KECS / com.juanmedina.kecs.entity / View / add add \u00b6 open fun add(element: Entity ): Boolean Adds a Entity to our view. Parameters \u00b6 element - The Entity] com.juanmedina.kecs.entity.Entity to add to our view.","title":"Add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add/#add","text":"open fun add(element: Entity ): Boolean Adds a Entity to our view.","title":"add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/add/#parameters","text":"element - The Entity] com.juanmedina.kecs.entity.Entity to add to our view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/clear/","text":"KECS / com.juanmedina.kecs.entity / View / clear clear \u00b6 open fun clear(): Unit Clear all the entities in our view.","title":"Clear"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/clear/#clear","text":"open fun clear(): Unit Clear all the entities in our view.","title":"clear"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/component/","text":"KECS / com.juanmedina.kecs.entity / View / component component \u00b6 fun <reified T : Any > component(): T Return a single component from a single Entity that has a component of the giving type, or throws exception if there is more than one.","title":"Component"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/component/#component","text":"fun <reified T : Any > component(): T Return a single component from a single Entity that has a component of the giving type, or throws exception if there is more than one.","title":"component"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/components/","text":"KECS / com.juanmedina.kecs.entity / View / components components \u00b6 fun <reified T : Any > components(): List <T> Return the components in our view for a giving class.","title":"Components"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/components/#components","text":"fun <reified T : Any > components(): List <T> Return the components in our view for a giving class.","title":"components"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains-all/","text":"KECS / com.juanmedina.kecs.entity / View / containsAll containsAll \u00b6 open fun containsAll(elements: Collection < Entity >): Boolean Checks if a set of entities exists in our view. Parameters \u00b6 elements - The set of entities to check in our view.","title":"Contains all"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains-all/#containsall","text":"open fun containsAll(elements: Collection < Entity >): Boolean Checks if a set of entities exists in our view.","title":"containsAll"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains-all/#parameters","text":"elements - The set of entities to check in our view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains/","text":"KECS / com.juanmedina.kecs.entity / View / contains contains \u00b6 open fun contains(element: Entity ): Boolean Checks if a Entity exists in our view. Parameters \u00b6 element - The Entity to check in our view.","title":"Contains"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains/#contains","text":"open fun contains(element: Entity ): Boolean Checks if a Entity exists in our view.","title":"contains"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/contains/#parameters","text":"element - The Entity to check in our view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entities/","text":"KECS / com.juanmedina.kecs.entity / View / entities entities \u00b6 fun <reified T : Any > entities(): List < Entity > Return a set entities that has a component of the giving type. inline fun <reified T : Any > entities(receiver: ( Entity ) -> Unit ): Unit Send to a receiver a set of entities that has a component of the giving type. Parameters \u00b6 receiver - function that will receive the entities.","title":"Entities"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entities/#entities","text":"fun <reified T : Any > entities(): List < Entity > Return a set entities that has a component of the giving type. inline fun <reified T : Any > entities(receiver: ( Entity ) -> Unit ): Unit Send to a receiver a set of entities that has a component of the giving type.","title":"entities"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entities/#parameters","text":"receiver - function that will receive the entities.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entity/","text":"KECS / com.juanmedina.kecs.entity / View / entity entity \u00b6 fun entity(vararg types: KClass <out Any >): Entity Return a single Entity that has a component of the giving types, or throws exception if there is more than one. Parameters \u00b6 types - Component classes such Position::class fun <reified T : Any > entity(): Entity Return a single Entity that has a component of the giving type, or throws exception if there is more than one.","title":"Entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entity/#entity","text":"fun entity(vararg types: KClass <out Any >): Entity Return a single Entity that has a component of the giving types, or throws exception if there is more than one.","title":"entity"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/entity/#parameters","text":"types - Component classes such Position::class fun <reified T : Any > entity(): Entity Return a single Entity that has a component of the giving type, or throws exception if there is more than one.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/has-component/","text":"KECS / com.juanmedina.kecs.entity / View / hasComponent hasComponent \u00b6 fun <reified T : Any > hasComponent(): Boolean Check if we have a any Entity with a given component type.","title":"Has component"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/has-component/#hascomponent","text":"fun <reified T : Any > hasComponent(): Boolean Check if we have a any Entity with a given component type.","title":"hasComponent"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/is-empty/","text":"KECS / com.juanmedina.kecs.entity / View / isEmpty isEmpty \u00b6 open fun isEmpty(): Boolean Check if the view has not entities .","title":"Is empty"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/is-empty/#isempty","text":"open fun isEmpty(): Boolean Check if the view has not entities .","title":"isEmpty"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/iterator/","text":"KECS / com.juanmedina.kecs.entity / View / iterator iterator \u00b6 open fun iterator(): MutableIterator < Entity > Obtain an Iterator of the entities in our view.","title":"Iterator"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/iterator/#iterator","text":"open fun iterator(): MutableIterator < Entity > Obtain an Iterator of the entities in our view.","title":"iterator"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/pairs/","text":"KECS / com.juanmedina.kecs.entity / View / pairs pairs \u00b6 fun <reified T : Any , reified K : Any > pairs(): List < Pair <T, K>> Return a set of Pair from the components of the given type. This could be use for destructing declarations. inline fun <reified T : Any , reified K : Any > pairs(receiver: ( Pair <T, K>) -> Unit ): Unit Send a set of Pair from the components of the given type to a receiver. This could be use for destructing declarations. Parameters \u00b6 receiver - function that will receive the pairs.","title":"Pairs"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/pairs/#pairs","text":"fun <reified T : Any , reified K : Any > pairs(): List < Pair <T, K>> Return a set of Pair from the components of the given type. This could be use for destructing declarations. inline fun <reified T : Any , reified K : Any > pairs(receiver: ( Pair <T, K>) -> Unit ): Unit Send a set of Pair from the components of the given type to a receiver. This could be use for destructing declarations.","title":"pairs"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/pairs/#parameters","text":"receiver - function that will receive the pairs.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove-all/","text":"KECS / com.juanmedina.kecs.entity / View / removeAll removeAll \u00b6 open fun removeAll(elements: Collection < Entity >): Boolean Remove a set of entities in our view. Parameters \u00b6 elements - a set of entities to be removed from the view.","title":"Remove all"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove-all/#removeall","text":"open fun removeAll(elements: Collection < Entity >): Boolean Remove a set of entities in our view.","title":"removeAll"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove-all/#parameters","text":"elements - a set of entities to be removed from the view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove/","text":"KECS / com.juanmedina.kecs.entity / View / remove remove \u00b6 open fun remove(element: Entity ): Boolean Removes a specific Entity in our view. Parameters \u00b6 element - Entity to be removed from the view.","title":"Remove"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove/#remove","text":"open fun remove(element: Entity ): Boolean Removes a specific Entity in our view.","title":"remove"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/remove/#parameters","text":"element - Entity to be removed from the view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/retain-all/","text":"KECS / com.juanmedina.kecs.entity / View / retainAll retainAll \u00b6 open fun retainAll(elements: Collection < Entity >): Boolean Remove all entities in a view no matching the ones provided. Parameters \u00b6 elements - entities to retain in our view.","title":"Retain all"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/retain-all/#retainall","text":"open fun retainAll(elements: Collection < Entity >): Boolean Remove all entities in a view no matching the ones provided.","title":"retainAll"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/retain-all/#parameters","text":"elements - entities to retain in our view.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/size/","text":"KECS / com.juanmedina.kecs.entity / View / size size \u00b6 open val size: Int Number of entities in our View.","title":"Size"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/size/#size","text":"open val size: Int Number of entities in our View.","title":"size"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/triples/","text":"KECS / com.juanmedina.kecs.entity / View / triples triples \u00b6 fun <reified T : Any , reified K : Any , reified V : Any > triples(): List < Triple <T, K, V>> Return a set of Triple from the components of the given type. This could be use for destructing declarations. inline fun <reified T : Any , reified K : Any , reified V : Any > triples(receiver: ( Triple <T, K, V>) -> Unit ): Unit Send a set of Triple from the components of the given type to a receiver. This could be use for destructing declarations. Parameters \u00b6 receiver - function that will receive the triples.","title":"Triples"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/triples/#triples","text":"fun <reified T : Any , reified K : Any , reified V : Any > triples(): List < Triple <T, K, V>> Return a set of Triple from the components of the given type. This could be use for destructing declarations. inline fun <reified T : Any , reified K : Any , reified V : Any > triples(receiver: ( Triple <T, K, V>) -> Unit ): Unit Send a set of Triple from the components of the given type to a receiver. This could be use for destructing declarations.","title":"triples"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/triples/#parameters","text":"receiver - function that will receive the triples.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/view/","text":"KECS / com.juanmedina.kecs.entity / View / view view \u00b6 fun view(vararg types: KClass <out Any >): View Create a sub-view giving a set of component classes. Parameters \u00b6 types - Set of Components class such Position::class. Return a new create view with the components of the provided classes. fun view(vararg types: KClass <out Any >, receiver: ( Entity ) -> Unit ): Unit Send to a receiver a set of Entities for the given types Parameters \u00b6 types - set of KClass that we need on the entities. receiver - function that will receive the entities.","title":"View"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/view/#view","text":"fun view(vararg types: KClass <out Any >): View Create a sub-view giving a set of component classes.","title":"view"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/view/#parameters","text":"types - Set of Components class such Position::class. Return a new create view with the components of the provided classes. fun view(vararg types: KClass <out Any >, receiver: ( Entity ) -> Unit ): Unit Send to a receiver a set of Entities for the given types","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.entity/-view/view/#parameters_1","text":"types - set of KClass that we need on the entities. receiver - function that will receive the entities.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.platform/","text":"KECS / com.juanmedina.kecs.platform Package com.juanmedina.kecs.platform \u00b6 platform specific classes Functions \u00b6 Name Summary getSystemMillis Return the system time in milliseconds, delta between two subsequent calls are use to update the Systems calling it update method. fun getSystemMillis(): Long","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.platform/#package-comjuanmedinakecsplatform","text":"platform specific classes","title":"Package com.juanmedina.kecs.platform"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.platform/#functions","text":"Name Summary getSystemMillis Return the system time in milliseconds, delta between two subsequent calls are use to update the Systems calling it update method. fun getSystemMillis(): Long","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.platform/get-system-millis/","text":"KECS / com.juanmedina.kecs.platform / getSystemMillis getSystemMillis \u00b6 fun getSystemMillis(): Long Return the system time in milliseconds, delta between two subsequent calls are use to update the Systems calling it update method.","title":"Get system millis"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.platform/get-system-millis/#getsystemmillis","text":"fun getSystemMillis(): Long Return the system time in milliseconds, delta between two subsequent calls are use to update the Systems calling it update method.","title":"getSystemMillis"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/","text":"KECS / com.juanmedina.kecs.system Package com.juanmedina.kecs.system \u00b6 classes for creating systems Types \u00b6 Name Summary System A system take care of update our world base on the entities of the our world. abstract class System","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/#package-comjuanmedinakecssystem","text":"classes for creating systems","title":"Package com.juanmedina.kecs.system"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/#types","text":"Name Summary System A system take care of update our world base on the entities of the our world. abstract class System","title":"Types"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/","text":"KECS / com.juanmedina.kecs.system / System System \u00b6 abstract class System A system take care of update our world base on the entities of the our world. Constructors \u00b6 Name Summary <init> A system take care of update our world base on the entities of the our world. System() Functions \u00b6 Name Summary update get notified by the world that this system needs update. abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/#system","text":"abstract class System A system take care of update our world base on the entities of the our world.","title":"System"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/#constructors","text":"Name Summary <init> A system take care of update our world base on the entities of the our world. System()","title":"Constructors"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/#functions","text":"Name Summary update get notified by the world that this system needs update. abstract fun update(delta: Float , total: Float , world: World ): Unit","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/-init-/","text":"KECS / com.juanmedina.kecs.system / System / <init> <init> \u00b6 System() A system take care of update our world base on the entities of the our world.","title":" init "},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/-init-/#init","text":"System() A system take care of update our world base on the entities of the our world.","title":"&lt;init&gt;"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/update/","text":"KECS / com.juanmedina.kecs.system / System / update update \u00b6 abstract fun update(delta: Float , total: Float , world: World ): Unit get notified by the world that this system needs update. Parameters \u00b6 delta - time since last update in seconds. total - total time since the world was created. world - the ECS world that needs updates.","title":"Update"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/update/#update","text":"abstract fun update(delta: Float , total: Float , world: World ): Unit get notified by the world that this system needs update.","title":"update"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.system/-system/update/#parameters","text":"delta - time since last update in seconds. total - total time since the world was created. world - the ECS world that needs updates.","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/","text":"KECS / com.juanmedina.kecs.world Package com.juanmedina.kecs.world \u00b6 classes for managing our ECS world Types \u00b6 Name Summary World Contains all the entities and systems on our ECS . class World : View","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/#package-comjuanmedinakecsworld","text":"classes for managing our ECS world","title":"Package com.juanmedina.kecs.world"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/#types","text":"Name Summary World Contains all the entities and systems on our ECS . class World : View","title":"Types"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/","text":"KECS / com.juanmedina.kecs.world / World World \u00b6 class World : View Contains all the entities and systems on our ECS . When we ask to the world to update all the systems get notified with the state of our world. Since it extend from View allow to flexible query our entities . Constructors \u00b6 Name Summary <init> Contains all the entities and systems on our ECS . World() Functions \u00b6 Name Summary add Adds a systems to our world. fun add(system: System ): Unit update Perform a world update, triggering the update method in each of the systems added to the world. fun update(): Unit Extension Functions \u00b6 Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Index"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/#world","text":"class World : View Contains all the entities and systems on our ECS . When we ask to the world to update all the systems get notified with the state of our world. Since it extend from View allow to flexible query our entities .","title":"World"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/#constructors","text":"Name Summary <init> Contains all the entities and systems on our ECS . World()","title":"Constructors"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/#functions","text":"Name Summary add Adds a systems to our world. fun add(system: System ): Unit update Perform a world update, triggering the update method in each of the systems added to the world. fun update(): Unit","title":"Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/#extension-functions","text":"Name Summary add DSL for adding entities using EntityDsl . fun View .add(init: EntityDsl .() -> Unit ): Entity","title":"Extension Functions"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/-init-/","text":"KECS / com.juanmedina.kecs.world / World / <init> <init> \u00b6 World() Contains all the entities and systems on our ECS . When we ask to the world to update all the systems get notified with the state of our world. Since it extend from View allow to flexible query our entities .","title":" init "},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/-init-/#init","text":"World() Contains all the entities and systems on our ECS . When we ask to the world to update all the systems get notified with the state of our world. Since it extend from View allow to flexible query our entities .","title":"&lt;init&gt;"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/add/","text":"KECS / com.juanmedina.kecs.world / World / add add \u00b6 fun add(system: System ): Unit Adds a systems to our world. Parameters \u00b6 system - a System .","title":"Add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/add/#add","text":"fun add(system: System ): Unit Adds a systems to our world.","title":"add"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/add/#parameters","text":"system - a System .","title":"Parameters"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/update/","text":"KECS / com.juanmedina.kecs.world / World / update update \u00b6 fun update(): Unit Perform a world update, triggering the update method in each of the systems added to the world.","title":"Update"},{"location":"packages/-k-e-c-s/com.juanmedina.kecs.world/-world/update/#update","text":"fun update(): Unit Perform a world update, triggering the update method in each of the systems added to the world.","title":"update"}]}