plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.dokka' version "0.10.1"
}

repositories {
    mavenCentral()
    jcenter()
}

apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.jfrog.bintray'

def GROUP_ID='com.juanmedina'
def ARTIFACT_ID= 'kecs'

def BINTRAY_REPOSITORY= 'kecs'
def BINTRAY_ORGINIZATION= 'juan-medina'

def ISSUE_URL= 'https://github.com/juan-medina/kecs/issues'
def SITE_URL= 'https://juan-medina.github.io/kecs/'
def VCS_URL= 'https://github.com/juan-medina/kecs.git'
def LIBRARY_VERSION_NAME='1.0.2'

group GROUP_ID
version LIBRARY_VERSION_NAME

kotlin {
    jvm()
    linuxX64("linux")
    mingwX64("mingw")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
            dependsOn commonMain
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
            dependsOn commonTest
        }
        linuxMain {
            dependsOn commonMain
        }
        linuxTest {
            dependsOn commonTest
        }
        mingwMain {
            dependsOn commonMain
        }
        mingwTest {
            dependsOn commonTest
        }
    }
}

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
    // so I am gradle.properties writing locally.
    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
    // so if it is written in property in the home directory, it will be useful for other projects as well.
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()

    publish = true

    pkg {
        repo = BINTRAY_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
}

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
bintrayUpload.dependsOn publishToMavenLocal

dokka {
    outputDirectory = "${project.rootDir}/api/docs/packages"
    outputFormat = "gfm"
    configuration {
        moduleName = 'KECS'
        includes = ["${projectDir}/src/Module.md".toString()]
    }
}
